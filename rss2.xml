<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>绯鞠的博客</title>
    <link>https://feiju12138.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>捕捉一只爱折腾的绯鞠</description>
    <pubDate>Wed, 30 Sep 2020 08:19:46 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>【笔记】SpringBoot项目配置前端页面</title>
      <link>https://feiju12138.github.io/2020/09/30/SpringBoot%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2/</link>
      <guid>https://feiju12138.github.io/2020/09/30/SpringBoot%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2/</guid>
      <pubDate>Wed, 30 Sep 2020 08:17:45 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;SpringBoot项目配置前端页面，需要引入&lt;code&gt;thymeleaf&lt;/code&gt;和&lt;code&gt;spring web&lt;/code&gt;依赖&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SpringBoot项目配置前端页面，需要引入<code>thymeleaf</code>和<code>spring web</code>依赖</p><a id="more"></a><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单体架构</span></span><br><span class="line"><span class="meta">spring.thymeleaf.prefix</span>=<span class="string">classpath:/templates/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前后端分离架构动态页面</span></span><br><span class="line"><span class="comment"># spring.thymeleaf.prefix=file:/src/main/resources/templates/</span></span><br><span class="line"><span class="comment"># spring.thymeleaf.prefix=file:///src/main/resources/templates/</span></span><br><span class="line"><span class="comment"># spring.thymeleaf.prefix=http://localhost/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前后端分离架构静态页面</span></span><br><span class="line"><span class="comment"># spring.mvc.static-path-pattern=</span></span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/09/30/SpringBoot%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【代码】通过ModelAndView对象将数据返回到客户端</title>
      <link>https://feiju12138.github.io/2020/09/30/%E9%80%9A%E8%BF%87ModelAndView%E5%AF%B9%E8%B1%A1%E5%B0%86%E6%95%B0%E6%8D%AE%E8%BF%94%E5%9B%9E%E5%88%B0%E5%AE%A2%E6%88%B7%E7%AB%AF/</link>
      <guid>https://feiju12138.github.io/2020/09/30/%E9%80%9A%E8%BF%87ModelAndView%E5%AF%B9%E8%B1%A1%E5%B0%86%E6%95%B0%E6%8D%AE%E8%BF%94%E5%9B%9E%E5%88%B0%E5%AE%A2%E6%88%B7%E7%AB%AF/</guid>
      <pubDate>Wed, 30 Sep 2020 08:09:08 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;SpringBoot项目中Controller层，通过ModelAndView对象将数据返回到客户端&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SpringBoot项目中Controller层，通过ModelAndView对象将数据返回到客户端</p><a id="more"></a><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li>返回值会交给DispatcherServletd对象进行处理</li><li>DispatcherServlet对象会调用viewresolver对结果进行解析</li><li>基于viewresolver找到对应的view页面（prefix+viewname+suffix）</li><li>将model中的数据填充到view页面上</li><li>返回一个带有model数据的页面给DispatcherServlet</li><li>DispatcherServlet将带有model数据的页面响应到客户端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">do</span><span class="params">()</span> </span>&#123;<span class="comment">// 此对象由DispatcherServlet对象通过反射调用</span></span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    modelAndView.setViewName(<span class="string">"default"</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">"username"</span>,<span class="string">"chenzishu"</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">"state"</span>,<span class="string">"yajiankang"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/09/30/%E9%80%9A%E8%BF%87ModelAndView%E5%AF%B9%E8%B1%A1%E5%B0%86%E6%95%B0%E6%8D%AE%E8%BF%94%E5%9B%9E%E5%88%B0%E5%AE%A2%E6%88%B7%E7%AB%AF/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【代码】简单模拟@ResponseBody底层效果</title>
      <link>https://feiju12138.github.io/2020/09/30/%E7%AE%80%E5%8D%95%E6%A8%A1%E6%8B%9F-ResponseBody%E5%BA%95%E5%B1%82%E6%95%88%E6%9E%9C/</link>
      <guid>https://feiju12138.github.io/2020/09/30/%E7%AE%80%E5%8D%95%E6%A8%A1%E6%8B%9F-ResponseBody%E5%BA%95%E5%B1%82%E6%95%88%E6%9E%9C/</guid>
      <pubDate>Wed, 30 Sep 2020 07:59:12 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;SpringBoot项目中，当使用@ResponseBody注解描述控制层方法时，用于告诉Spring框架，这个方法返回值可以按照特定格式（例如JSON）进行转换，将转换以后的结果写到response对象的相应体中&lt;br&gt;方法的返回值不在封装为ModelAndView对象，不会再交给解析器进行解析，而是直接基于response对象响应到客户端&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SpringBoot项目中，当使用@ResponseBody注解描述控制层方法时，用于告诉Spring框架，这个方法返回值可以按照特定格式（例如JSON）进行转换，将转换以后的结果写到response对象的相应体中<br>方法的返回值不在封装为ModelAndView对象，不会再交给解析器进行解析，而是直接基于response对象响应到客户端</p><a id="more"></a><h2 id="标注后代码"><a href="#标注后代码" class="headerlink" title="标注后代码"></a>标注后代码</h2><ul><li>通过返回对象，底层会自动将处理结果响应到客户端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">doPrint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"username"</span>,<span class="string">"刘德华"</span>);</span><br><span class="line">    map.put(<span class="string">"state"</span>,<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标注前代码"><a href="#标注前代码" class="headerlink" title="标注前代码"></a>标注前代码</h2><ul><li>底层实现的代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPrint</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"username"</span>,<span class="string">"刘德华"</span>);</span><br><span class="line">    map.put(<span class="string">"state"</span>,<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 将map中的数据转换为json格式字符串</span></span><br><span class="line">    ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    String jsonStr = objectMapper.writeValueAsString(map);</span><br><span class="line">    <span class="comment">// 设置响应数据的编码</span></span><br><span class="line">    <span class="comment">//response.setCharacterEncoding("utf-8");</span></span><br><span class="line">    <span class="comment">// 告诉客户端相应数据类型为text/html，编码为utf-8，请以这种编码形式进行数据呈现</span></span><br><span class="line">    response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">    <span class="comment">// 将字符串响应到客户端</span></span><br><span class="line">    response.getWriter().println(jsonStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/09/30/%E7%AE%80%E5%8D%95%E6%A8%A1%E6%8B%9F-ResponseBody%E5%BA%95%E5%B1%82%E6%95%88%E6%9E%9C/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【笔记】SpringBoot项目修改Banner图</title>
      <link>https://feiju12138.github.io/2020/09/29/SpringBoot%E9%A1%B9%E7%9B%AE%E4%BF%AE%E6%94%B9Banner%E5%9B%BE/</link>
      <guid>https://feiju12138.github.io/2020/09/29/SpringBoot%E9%A1%B9%E7%9B%AE%E4%BF%AE%E6%94%B9Banner%E5%9B%BE/</guid>
      <pubDate>Tue, 29 Sep 2020 08:06:17 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;SpringBoot项目修改Banner图&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SpringBoot项目修改Banner图</p><a id="more"></a><h2 id="修改Banner图"><a href="#修改Banner图" class="headerlink" title="修改Banner图"></a>修改Banner图</h2><ul><li>在项目的<code>resources</code>目录下创建<code>banner.txt</code>、<code>banner.gif</code>、<code>banner.jpg</code>、<code>banner.png</code>的其中一种文件，SpringBoot会自动加载</li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://juejin.im/post/6844903840936886280" target="_blank" rel="noopener">掘金——静默虚空</a><br><a href="https://www.bootschool.net/ascii-art" target="_blank" rel="noopener">BootSchool</a></p>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/09/29/SpringBoot%E9%A1%B9%E7%9B%AE%E4%BF%AE%E6%94%B9Banner%E5%9B%BE/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【笔记】IDEA在创建Maven项目后添加依赖</title>
      <link>https://feiju12138.github.io/2020/09/29/IDEA%E5%9C%A8%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE%E5%90%8E%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96/</link>
      <guid>https://feiju12138.github.io/2020/09/29/IDEA%E5%9C%A8%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE%E5%90%8E%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96/</guid>
      <pubDate>Tue, 29 Sep 2020 02:04:56 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;IDEA在创建Maven项目后，使用插件，实现自动添加依赖&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>IDEA在创建Maven项目后，使用插件，实现自动添加依赖</p><a id="more"></a><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><ul><li><code>Intellij IDEA</code>-&gt;<code>Preferences</code>-&gt;<code>Plugins</code>-&gt;<code>Marketplace</code>-&gt;搜索<code>EditStarters</code>-&gt;<code>Install</code></li></ul><p><img src="/images/20200929100456/01.png" alt="01.png"></p><ul><li>打开项目<code>pom.xml</code>文件-&gt;将光标移到<code>&lt;dependencies&gt;&lt;/denpendencies&gt;</code>标签内-&gt;MacOS使用快捷键<code>ctrl</code>+<code>return</code>（或<code>command</code>+<code>n</code>），Windows使用<code>alt</code>+<code>insert</code>-&gt;<code>Edit Starters</code></li></ul><p><img src="/images/20200929100456/02.png" alt="02.png"></p><ul><li>修改starter源-&gt;<code>OK</code></li></ul><p><img src="/images/20200929100456/03.png" alt="03.png"></p><ul><li>双击进行添加依赖或移除依赖</li></ul><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/w1043203101/article/details/79688848" target="_blank" rel="noopener">CSDN——许洛以合</a><br><a href="https://blog.csdn.net/weixin_30363263/article/details/84380805" target="_blank" rel="noopener">CSDN——山鬼谣弋痕夕</a></p>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/09/29/IDEA%E5%9C%A8%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE%E5%90%8E%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
