<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>绯鞠的博客</title>
    <link>https://feiju12138.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>捕捉一只爱折腾的绯鞠</description>
    <pubDate>Wed, 05 Aug 2020 09:49:55 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>【笔记】Eclipse配置tomcat环境</title>
      <link>https://feiju12138.github.io/2020/08/05/Eclipse%E9%85%8D%E7%BD%AEtomcat%E7%8E%AF%E5%A2%83/</link>
      <guid>https://feiju12138.github.io/2020/08/05/Eclipse%E9%85%8D%E7%BD%AEtomcat%E7%8E%AF%E5%A2%83/</guid>
      <pubDate>Wed, 05 Aug 2020 09:32:18 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Eclipse配置tomcat环境&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Eclipse配置tomcat环境</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>Eclipse JavaEE版本</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li><code>Eclipse</code>-&gt;<code>Preferences</code></li></ul><p><img src="/images/20200805173218/01.png" alt="01.png"></p><ul><li><code>Server</code>-&gt;<code>Runtime Environments</code></li></ul><p><img src="/images/20200805173218/02.png" alt="02.png"></p><ul><li>选择tomcat版本</li></ul><p><img src="/images/20200805173218/03.png" alt="03.png"></p><ul><li>自定义服务器名，选择tomcat安装位置，选择JRE配置</li></ul><p><img src="/images/20200805173218/04.png" alt="04.png"></p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/08/05/Eclipse%E9%85%8D%E7%BD%AEtomcat%E7%8E%AF%E5%A2%83/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【笔记】完整卸载pkg包安装的软件</title>
      <link>https://feiju12138.github.io/2020/08/05/%E5%AE%8C%E6%95%B4%E5%8D%B8%E8%BD%BDpkg%E5%8C%85%E5%AE%89%E8%A3%85%E7%9A%84%E8%BD%AF%E4%BB%B6/</link>
      <guid>https://feiju12138.github.io/2020/08/05/%E5%AE%8C%E6%95%B4%E5%8D%B8%E8%BD%BDpkg%E5%8C%85%E5%AE%89%E8%A3%85%E7%9A%84%E8%BD%AF%E4%BB%B6/</guid>
      <pubDate>Wed, 05 Aug 2020 02:12:44 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;完整卸载使用&lt;code&gt;.pkg&lt;/code&gt;安装包安装的软件&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>完整卸载使用<code>.pkg</code>安装包安装的软件</p><a id="more"></a><h2 id="安装pkg-uninstaller"><a href="#安装pkg-uninstaller" class="headerlink" title="安装pkg_uninstaller"></a>安装pkg_uninstaller</h2><ul><li><a href="https://github.com/mpapis/pkg_uninstaller" target="_blank" rel="noopener">官网</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo bash &lt; &lt;(curl -sL https://raw.github.com/mpapis/pkg_uninstaller/master/pkg-install)</span><br></pre></td></tr></table></figure><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">echo</span> <span class="string">'PATH=$PATH:/opt/pkg_uninstaller'</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'PATH=$PATH:$HOME/.pkg_uninstaller'</span> &gt;&gt; <span class="variable">$HOME</span>/.bash_profile</span><br></pre></td></tr></table></figure><h2 id="获取所有已安装的软件列表"><a href="#获取所有已安装的软件列表" class="headerlink" title="获取所有已安装的软件列表"></a>获取所有已安装的软件列表</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg-list</span><br></pre></td></tr></table></figure><h2 id="根据获取的软件完整名进行卸载"><a href="#根据获取的软件完整名进行卸载" class="headerlink" title="根据获取的软件完整名进行卸载"></a>根据获取的软件完整名进行卸载</h2><blockquote><p><code>&lt;com.xxx&gt;</code>：软件包完整名</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg-uninstall &lt;com.xxx&gt;</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://jingyan.baidu.com/article/ac6a9a5e0b0a662b653eac2f.html" target="_blank" rel="noopener">百度经验——szh0129</a></p>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/08/05/%E5%AE%8C%E6%95%B4%E5%8D%B8%E8%BD%BDpkg%E5%8C%85%E5%AE%89%E8%A3%85%E7%9A%84%E8%BD%AF%E4%BB%B6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【笔记】Javascript  学习笔记</title>
      <link>https://feiju12138.github.io/2020/07/31/Javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <guid>https://feiju12138.github.io/2020/07/31/Javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Fri, 31 Jul 2020 09:22:01 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;JavaScript（通常缩写为JS）是一种高级的、解释型的编程语言。JavaScript是一门基于原型、函数先行的语言，是一门多范式的语言，它支持面向对象编程，命令式编程，以及函数式编程。它提供语法来操控文本、数组、日期以及正则表达式等，不支持I/O，比如网络、存储和图形等，但这些都可以由它的宿主环境提供支持。它已经由ECMA（欧洲电脑制造商协会）通过ECMAScript实现语言的标准化。它被世界上的绝大多数网站所使用，也被世界主流浏览器（Chrome、IE、Firefox、Safari、Opera）支持。（&lt;a href=&quot;https://zh.wikipedia.org/wiki/JavaScript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;维基百科&lt;/a&gt;）&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JavaScript（通常缩写为JS）是一种高级的、解释型的编程语言。JavaScript是一门基于原型、函数先行的语言，是一门多范式的语言，它支持面向对象编程，命令式编程，以及函数式编程。它提供语法来操控文本、数组、日期以及正则表达式等，不支持I/O，比如网络、存储和图形等，但这些都可以由它的宿主环境提供支持。它已经由ECMA（欧洲电脑制造商协会）通过ECMAScript实现语言的标准化。它被世界上的绝大多数网站所使用，也被世界主流浏览器（Chrome、IE、Firefox、Safari、Opera）支持。（<a href="https://zh.wikipedia.org/wiki/JavaScript" target="_blank" rel="noopener">维基百科</a>）</p><a id="more"></a><h2 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h2><h3 id="script标签内"><a href="#script标签内" class="headerlink" title="script标签内"></a>script标签内</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        ...</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br></pre></td></tr></table></figure><h3 id="引入-js文件"><a href="#引入-js文件" class="headerlink" title="引入.js文件"></a>引入.js文件</h3><blockquote><p><code>&lt;&lt;src&gt;&gt;</code>：路径.js文件路径</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;script src=<span class="string">"&lt;&lt;src&gt;&gt;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br></pre></td></tr></table></figure><h3 id="当触发onclick时执行"><a href="#当触发onclick时执行" class="headerlink" title="当触发onclick时执行"></a>当触发onclick时执行</h3><ul><li>在body中任意标签内的onclick属性添加js代码，但是只有在点击时才会执行</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> onclick=<span class="string">"..."</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>和java语法完全相同</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"><span class="comment">/* 多行注释 */</span></span><br></pre></td></tr></table></figure><h2 id="打印字符串"><a href="#打印字符串" class="headerlink" title="打印字符串"></a>打印字符串</h2><h3 id="打印到弹窗"><a href="#打印到弹窗" class="headerlink" title="打印到弹窗"></a>打印到弹窗</h3><blockquote><p><code>&lt;&lt;variable&gt;&gt;</code>：变量</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(&lt;&lt;variable&gt;&gt;);</span><br></pre></td></tr></table></figure><h3 id="打印到控制台"><a href="#打印到控制台" class="headerlink" title="打印到控制台"></a>打印到控制台</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(&lt;&lt;variable&gt;&gt;);</span><br></pre></td></tr></table></figure><h3 id="直接打印到网页上"><a href="#直接打印到网页上" class="headerlink" title="直接打印到网页上"></a>直接打印到网页上</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(&lt;&lt;variable&gt;&gt;);</span><br></pre></td></tr></table></figure><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><ul><li>var可以声明任何类型变量，一个变量一可以赋值任何数据类型</li></ul><blockquote><p><code>&lt;&lt;name&gt;&gt;</code>变量名</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &lt;&lt;name&gt;&gt; = &lt;&lt;variable&gt;&gt;;</span><br></pre></td></tr></table></figure><h3 id="新版语法"><a href="#新版语法" class="headerlink" title="新版语法"></a>新版语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &lt;&lt;name&gt;&gt; = &lt;&lt;variable&gt;&gt;;</span><br><span class="line">const var &lt;&lt;name&gt;&gt; = &lt;&lt;variable&gt;&gt;;</span><br></pre></td></tr></table></figure><h3 id="var和let、const-的区别"><a href="#var和let、const-的区别" class="headerlink" title="var和let、const 的区别"></a>var和let、const 的区别</h3><ul><li>let和const都是es5，es6新版本的js语言规范出来的定义，在这以前定义一个变量只能用var。let和const都是为了弥补var的一些缺陷而新设计出来的。</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>基本数据类型<br>String Number Boolean Null Undefined</li><li>引用数据类型<br>Object</li></ul><h3 id="检查当前数据类型"><a href="#检查当前数据类型" class="headerlink" title="检查当前数据类型"></a>检查当前数据类型</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span>(&lt;&lt;variable&gt;&gt;);</span><br></pre></td></tr></table></figure><h3 id="string字符串"><a href="#string字符串" class="headerlink" title="string字符串"></a>string字符串</h3><ul><li><ul><li>在JS中字符串需要使用引号引起来</li></ul></li><li>使用双引号或单引号都可以，但是不要混着用</li><li>引号不能嵌套，双引号不能放单引号，单引号不能放双引号</li><li>使用typeof检查字符串时，会返回string</li></ul><h3 id="Number数值型"><a href="#Number数值型" class="headerlink" title="Number数值型"></a>Number数值型</h3><ul><li>在JS中所有的数值都是Number类型</li><li>包括整数和浮点数</li><li>使用typeof检查数值时，会返回number</li></ul><h4 id="最值"><a href="#最值" class="headerlink" title="最值"></a>最值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.MAX_VALUE</span><br></pre></td></tr></table></figure><ul><li><p>如果使用Number表示的数字超过了最大值，则会返回一个<code>Infinity</code> （表示正无穷）</p></li><li><p>如果使用Number表示的数字低于了最小值，则会返回一个<code>-Infinity</code> （表示负无穷）</p></li><li><p>使用typeof检查Infinity也会返回Number</p></li><li><p>在JS中整数的运算基本可以保证精确</p></li><li><p>如果使用JS进行浮点运算，可能得到一个不精确的结果，所以千万不要使用JS进行对精确度要求比较高的运算</p></li></ul><h3 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a>boolean类型</h3><ul><li>布尔值只有两个，主要用来做逻辑判断</li><li><code>true</code>表示真，<code>false</code>表示假</li><li>使用typeof检查一个布尔值时，会返回boolean</li></ul><h3 id="Null类型"><a href="#Null类型" class="headerlink" title="Null类型"></a>Null类型</h3><ul><li>Null（空值）类型的值专门用来表示一个为空的对象</li><li>使用typeof检查一个null值时，会返回object</li></ul><h3 id="Undefined类型"><a href="#Undefined类型" class="headerlink" title="Undefined类型"></a>Undefined类型</h3><ul><li>Undefined（未定义）类型的值只有一个就是undefined</li><li>当声明一个变量，但是并不给变量赋值时，它的值就是undefined</li><li>使用typeof检查一个undefined值时，会返回undefined</li></ul><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><ul><li>指将一个数据类型强制转换为其他的数据类型</li><li>类型转换主要是指，将其他的数据类型，转化为String、Number、Boolean</li></ul><h4 id="将其他数据类型转换为String"><a href="#将其他数据类型转换为String" class="headerlink" title="将其他数据类型转换为String"></a>将其他数据类型转换为String</h4><h5 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h5><ul><li>调用被转换数据类型的toString()方法</li><li>该方法不会影响到原变量，他会将转换的结果返回</li><li>但是注意：null和undefined这两个值没有toString()方法，如果调用他们的方法，会报错</li></ul><h5 id="String"><a href="#String" class="headerlink" title="String()"></a>String()</h5><ul><li>调用String()函数，并将被转换的数据作为参数传递给函数</li><li>使用String()函数做强制类型转换时，</li><li>对于Number和Boolean实际上就是调用的toString()方法</li><li>但是对于null和undefined，就不会调用toString()方法</li><li>它会将null直接转换为”null”，将undefined直接转换为”undefined”</li></ul><h4 id="将其他的数据类型转换为Number"><a href="#将其他的数据类型转换为Number" class="headerlink" title="将其他的数据类型转换为Number"></a>将其他的数据类型转换为Number</h4><h5 id="Number"><a href="#Number" class="headerlink" title="Number()"></a>Number()</h5><h6 id="字符串转换为数字"><a href="#字符串转换为数字" class="headerlink" title="字符串转换为数字"></a>字符串转换为数字</h6><ul><li>如果是纯数字的字符串，则直接将其转化为数字</li><li>如果字符串中有非数字的内容，则转换为NaN</li><li>如果字符串是一个空串或者是一个全是空格的字符串，则转换为0</li></ul><h6 id="布尔值转换为数字"><a href="#布尔值转换为数字" class="headerlink" title="布尔值转换为数字"></a>布尔值转换为数字</h6><ul><li>true 转成 1</li><li>false 转成 0</li></ul><h6 id="Null转换为数字"><a href="#Null转换为数字" class="headerlink" title="Null转换为数字"></a>Null转换为数字</h6><ul><li>结果为0</li></ul><h6 id="undefined转换为数字"><a href="#undefined转换为数字" class="headerlink" title="undefined转换为数字"></a>undefined转换为数字</h6><ul><li>结果为NaN</li></ul><h5 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt()"></a>parseInt()</h5><ul><li><p>parseInt()函数：把一个字符串转换为一个整数</p></li><li><p>parseInt()可以将一个字符串中的有效的整数内容取出来</p></li><li><p>parseFloat()函数：把一个字符串转换为一个浮点数</p></li><li><p>parseFloat()作用和parseInt()类似，不同的是它可以获取有效的小数</p></li><li><p>如果对非String使用parseInt()或parseFloat()，它会先将其转换为String，然后再操作</p></li></ul><h4 id="其他的数据类型转换为Boolean"><a href="#其他的数据类型转换为Boolean" class="headerlink" title="其他的数据类型转换为Boolean"></a>其他的数据类型转换为Boolean</h4><ul><li>使用Boolean()函数</li><li>数字 转换为 布尔值， 除了0和NaN，其余的都是true</li><li>字符串转换为布尔值，除了空串，其余的都是true</li><li>null和undefind都会转换为false</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>在js中，如果需要使用16进制的数字，则需要以0x开头</li><li>如果需要表示8进制数字，则需要以0开头</li><li>如果需要表示2进制的数字，则需要以0b开头</li><li>但不是所有浏览器都支持</li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><blockquote><p>算术运算符： +，-，*，/，%，++，–<br>赋值运算符： =，+=，-=，*=，/=，%=<br>比较运算符： ==，!=，&gt;，&gt;=，&lt;，&lt;=<br>位运算符： &amp; ， |<br>逻辑运算符： &amp;&amp; ，||   ( false &amp;&amp; 表达式, true || 表达式 )<br>前置逻辑运算符： ! (not)<br>三元运算符： 表达式 ? 表达式 : 表达式</p></blockquote><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li>JS中的数组可以存储任意类型的数据</li><li>JS中的数组长度是可以被任意改变的</li></ul><h3 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">"Hello"</span>, <span class="number">111</span>, <span class="literal">false</span>, <span class="keyword">new</span> <span class="built_in">Object</span>() ];</span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">var</span> arr4 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"Hello"</span>, <span class="number">111</span>, <span class="literal">false</span>, <span class="keyword">new</span> <span class="built_in">Object</span>());</span><br></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="对象的分类"><a href="#对象的分类" class="headerlink" title="对象的分类"></a>对象的分类</h3><h4 id="内建对象"><a href="#内建对象" class="headerlink" title="内建对象"></a>内建对象</h4><ul><li>由ES标准定义的对象，在任何的ES的实现中都可以使用</li><li>比如：Math String Number Boolean Function Object</li></ul><h4 id="宿主对象"><a href="#宿主对象" class="headerlink" title="宿主对象"></a>宿主对象</h4><ul><li>由JS的运行环境提供的对象，目的主要指由浏览器提供的对象</li><li>比如BOM DOM</li></ul><h4 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h4><ul><li>由开发人员自己创建的对象</li></ul><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><ul><li>使用new关键字调用的函数，是构造函数constructor</li><li>构造函数是专门用来创建对象的函数</li><li>使用typeof检查一个对象时，会返回object</li></ul><h3 id="在对象中保存的值称为属性"><a href="#在对象中保存的值称为属性" class="headerlink" title="在对象中保存的值称为属性"></a>在对象中保存的值称为属性</h3><ul><li>向对象添加属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象.属性名 = 属性值;</span><br></pre></td></tr></table></figure><h3 id="读取对象中的属性"><a href="#读取对象中的属性" class="headerlink" title="读取对象中的属性"></a>读取对象中的属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象.属性名</span><br></pre></td></tr></table></figure><ul><li>如果读取对象中没有的属性值，不会报错而是会返回undefined</li></ul><h3 id="修改对象的属性值"><a href="#修改对象的属性值" class="headerlink" title="修改对象的属性值"></a>修改对象的属性值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象.属性名 = 属性值;</span><br></pre></td></tr></table></figure><h3 id="删除对象的属性"><a href="#删除对象的属性" class="headerlink" title="删除对象的属性"></a>删除对象的属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> 对象.属性名</span><br></pre></td></tr></table></figure><h3 id="属性名"><a href="#属性名" class="headerlink" title="属性名"></a>属性名</h3><ul><li>对象的属性名不强制要求遵守标识符的规范，什么乱七八糟的名字都可以使用</li><li>但是我们使用时还是尽量按照标识符的规范去做</li><li>如果要使用特殊的属性名，不能采用.的方式来操作，需要使用另一种方式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象[<span class="string">'属性名'</span>] = 属性值;</span><br></pre></td></tr></table></figure><ul><li>读取时也需要采用这种方式</li><li>使用[]这种形式去操作属性，更加的灵活，</li><li>在[]中可以直接传递一个变量，这样变量值是多少就会读取那个属性</li></ul><h3 id="属性值"><a href="#属性值" class="headerlink" title="属性值"></a>属性值</h3><ul><li>JS对象的属性值，可以是任意的数据类型，甚至也可以是一个对象</li></ul><h3 id="in运算符"><a href="#in运算符" class="headerlink" title="in运算符"></a>in运算符</h3><ul><li>通过该运算符，可以检查一个对象中是否含有指定的属性，如果有则返回true，没有则返回false</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"属性名"</span> <span class="keyword">in</span> 对象</span><br></pre></td></tr></table></figure><h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><ul><li><p>JS中的变量都是保存到栈内存中的，</p></li><li><p>基本数据类型的值直接在栈内存中存储</p></li><li><p>值与值之间是独立存在，修改一个变量不会影响其他的变量</p></li><li><p>对象是保存到堆内存中的，每创建一个新的对象，就会在堆内存中开辟出一个新的空间</p></li><li><p>而变量保存的是对象的内存地址（对象的引用），如果两个变量保存的是用一个对象的引用，</p></li><li><p>当一个通过一个变量修改属性时，另一个也会受到影响</p></li><li><p>当比较两个基本数据类型的值时，就是比较值。</p></li><li><p>而比较两个引用数据类型时，它是比较的对象的内存地址，</p></li><li><p>如果两个对象是一模一样的，但是地址不同，它也会返回false</p></li><li><p>使用对象字面量，可以在创建对象时，直接指定对象中的属性</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;属性名:属性值, 属性名:属性值……&#125;</span><br></pre></td></tr></table></figure><ul><li>属性名和属性值时一组一组的名值对结构，</li><li>名和值之间使用<code>:</code>连接，多个名值对之间使用<code>,</code>隔开，如果一个属性之后没有其他属性了，就不要写<code>,</code></li></ul><h2 id="函数function"><a href="#函数function" class="headerlink" title="函数function"></a>函数function</h2><ul><li><p>函数也是一个对象</p></li><li><p>函数中可以封装一些功能（代码），在需要时可以执行这些功能（代码）</p></li><li><p>函数中可以保存一些代码在需要的时候调用</p></li><li><p>使用typeof检查一个函数对象时，会返回function</p></li><li><p>我们在实际开发中很少使用构造函数来创建一个函数对象</p></li><li><p>创建一个函数，可以将要封装的代码以字符串的形式传递给构造函数</p></li><li><p>封装到函数中的代码不会立即执行</p></li><li><p>函数中的代码会在函数调用的时候执行</p></li><li><p>调用函数语法</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数对象()</span><br></pre></td></tr></table></figure><ul><li>当调用函数时，函数中封装的代码会按照顺序执行</li></ul><h3 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h3><h4 id="使用函数声明来创建一个函数"><a href="#使用函数声明来创建一个函数" class="headerlink" title="使用函数声明来创建一个函数"></a>使用函数声明来创建一个函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">[形参<span class="number">1</span>, 形参<span class="number">2</span>……形参N]</span>)</span>&#123;</span><br><span class="line">    语句……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用函数表达式来创建一个函数"><a href="#使用函数表达式来创建一个函数" class="headerlink" title="使用函数表达式来创建一个函数"></a>使用函数表达式来创建一个函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 函数名 = <span class="function"><span class="keyword">function</span> (<span class="params">[形参<span class="number">1</span>, 形参<span class="number">2</span>……形参N]</span>)</span>&#123;</span><br><span class="line">    语句……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他-2"><a href="#其他-2" class="headerlink" title="其他"></a>其他</h3><ul><li><p>在调用函数时，可以在()中指定实参(实际参数)，实际参数会赋值给函数中对应的形参</p></li><li><p>调用函数时解析器不会检查实参的类型，所以要注意，是否有可能会接收到非法的参数，如果有可能则对参数进行类型的检查</p></li><li><p>函数的实参可以是任意的数据类型</p></li><li><p>调用函数时，解析器也不会检查实参的数量，多余实参不会被赋值</p></li><li><p>如果实参的数量少于形参的数量，则没有对应实参的形参将是undefined</p></li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>可以使用return来设置函数的返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> 值;</span><br></pre></td></tr></table></figure><ul><li>return后的值将会作为函数的执行结果返回，可以定义一个变量来接收该结果</li><li>在函数中return后的语句都不会执行</li></ul><h2 id="if判断语句"><a href="#if判断语句" class="headerlink" title="if判断语句"></a>if判断语句</h2><ul><li>和java语法完全相同</li></ul><blockquote><p><code>&lt;&lt;boolean&gt;&gt;</code>：结果为布尔值的语句</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (&lt;&lt;boolean&gt;&gt;) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="seitch判断语句"><a href="#seitch判断语句" class="headerlink" title="seitch判断语句"></a>seitch判断语句</h2><ul><li>和java语法完全相同</li></ul><blockquote><p><code>&lt;&lt;num&gt;&gt;</code>：数值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (&lt;&lt;variable&gt;&gt;) &#123;</span><br><span class="line">    case &lt;&lt;num&gt;&gt; :</span><br><span class="line">        ...</span><br><span class="line">        break;</span><br><span class="line">    default :</span><br><span class="line">        ...</span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h2><ul><li>和java语法完全相同</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (&lt;&lt;boolean&gt;&gt;) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h2><ul><li>和java语法完全相同</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; &lt;&lt;num&gt;&gt;; i++) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><ul><li>DOM: Document Object Model，文档对象模型，其实就是JS专门为访问html元素提供的一套API。</li></ul><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><ul><li><code>document</code>是一个js对象，用于表示当前html网页。当浏览器加载完整个html网页后，会用document对象表示整个html网页</li></ul><h4 id="获取当前文档中的body元素"><a href="#获取当前文档中的body元素" class="headerlink" title="获取当前文档中的body元素"></a>获取当前文档中的body元素</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body</span><br></pre></td></tr></table></figure><h4 id="获取当前元素的父元素"><a href="#获取当前元素的父元素" class="headerlink" title="获取当前元素的父元素"></a>获取当前元素的父元素</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.parentNode</span><br></pre></td></tr></table></figure><h4 id="获取当前元素的所有html内容"><a href="#获取当前元素的所有html内容" class="headerlink" title="获取当前元素的所有html内容"></a>获取当前元素的所有html内容</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.innerHTML</span><br></pre></td></tr></table></figure><h4 id="通过id获取元素"><a href="#通过id获取元素" class="headerlink" title="通过id获取元素"></a>通过id获取元素</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"div1"</span>&gt;xxxx&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//获取id为div1的元素</span></span><br><span class="line">    <span class="keyword">var</span> oDiv1 = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="通过class获取元素"><a href="#通过class获取元素" class="headerlink" title="通过class获取元素"></a>通过class获取元素</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"c1"</span>&gt;xxxx&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//获取第一个class为c1的元素（因为返回值为数组）</span></span><br><span class="line">    <span class="keyword">var</span> oC1 = <span class="built_in">document</span>.getElementByClass(<span class="string">"c1"</span>)[<span class="number">0</span>];</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="增删改元素"><a href="#增删改元素" class="headerlink" title="增删改元素"></a>增删改元素</h3><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建一个新的div元素</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">d.innerHTML = <span class="string">"新创建的div"</span>;</span><br><span class="line"><span class="comment">//2.获取body元素</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">document</span>.body;</span><br><span class="line"><span class="comment">//3.通过父元素(body元素)添加子元素(div元素)</span></span><br><span class="line">b.appendChild(d);</span><br></pre></td></tr></table></figure><h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取要删除的元素(id为d)</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="built_in">document</span>.getElementById(<span class="string">"d"</span>);</span><br><span class="line"><span class="comment">//2.获取id为d的元素的父元素</span></span><br><span class="line"><span class="keyword">var</span> parent = d.parentNode;</span><br><span class="line"><span class="comment">//3.通过父元素删除子元素</span></span><br><span class="line">parent.removeChild(d);</span><br></pre></td></tr></table></figure><h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取id为d的元素</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="built_in">document</span>.getElementById(<span class="string">"d"</span>);</span><br><span class="line"><span class="comment">//2.修改元素内容</span></span><br><span class="line">d.innerHTML = <span class="string">"修改后的文字"</span>;</span><br></pre></td></tr></table></figure><h2 id="弹窗接收字符串"><a href="#弹窗接收字符串" class="headerlink" title="弹窗接收字符串"></a>弹窗接收字符串</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = prompt();</span><br></pre></td></tr></table></figure><h3 id="提示文字"><a href="#提示文字" class="headerlink" title="提示文字"></a>提示文字</h3><blockquote><p><code>&lt;&lt;text&gt;&gt;</code>：提示文字</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = prompt(&lt;&lt;text&gt;&gt;);</span><br></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="获取body标签"><a href="#获取body标签" class="headerlink" title="获取body标签"></a>获取body标签</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body;</span><br></pre></td></tr></table></figure><h3 id="设置标签的内容"><a href="#设置标签的内容" class="headerlink" title="设置标签的内容"></a>设置标签的内容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">d.innerHTML = <span class="string">"文字内容"</span>;</span><br></pre></td></tr></table></figure><h3 id="获取父元素"><a href="#获取父元素" class="headerlink" title="获取父元素"></a>获取父元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="built_in">document</span>.getElementById(<span class="string">"d"</span>);</span><br><span class="line"><span class="keyword">var</span> parent = d.parentNode;</span><br></pre></td></tr></table></figure><h3 id="获取表示当前时间的字符串"><a href="#获取表示当前时间的字符串" class="headerlink" title="获取表示当前时间的字符串"></a>获取表示当前时间的字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString();</span><br></pre></td></tr></table></figure><h3 id="修改CSS样式"><a href="#修改CSS样式" class="headerlink" title="修改CSS样式"></a>修改CSS样式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.getElementById(<span class="string">"link"</span>);</span><br><span class="line">link.href = <span class="string">"css/*.css"</span>;</span><br></pre></td></tr></table></figure><h2 id="预加载函数"><a href="#预加载函数" class="headerlink" title="预加载函数"></a>预加载函数</h2><ul><li>function函数会在浏览器加载完整网页后立即执行</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.zhihu.com/question/52662013" target="_blank" rel="noopener">知乎——知乎用户</a></p>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/07/31/Javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【笔记】注解学习笔记</title>
      <link>https://feiju12138.github.io/2020/07/27/%E6%B3%A8%E8%A7%A3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <guid>https://feiju12138.github.io/2020/07/27/%E6%B3%A8%E8%A7%A3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Mon, 27 Jul 2020 13:35:39 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Java 注解 学习笔记&lt;br&gt;JDK1.5以后的新特性&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java 注解 学习笔记<br>JDK1.5以后的新特性</p><a id="more"></a><h2 id="注解的功能"><a href="#注解的功能" class="headerlink" title="注解的功能"></a>注解的功能</h2><h3 id="编写文档"><a href="#编写文档" class="headerlink" title="编写文档"></a>编写文档</h3><ul><li>通过代码里标识的注解生成文档</li></ul><blockquote><p><code>&lt;name&gt;</code>：类名</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javadoc &lt;name&gt;.java</span><br></pre></td></tr></table></figure><h3 id="编译检查"><a href="#编译检查" class="headerlink" title="编译检查"></a>编译检查</h3><ul><li>通过代码里标识的注解让编译器能够实现基本的编译检查</li></ul><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><ul><li>通过代码里标识的注解对代码进行分析</li></ul><h2 id="JDK内置注解"><a href="#JDK内置注解" class="headerlink" title="JDK内置注解"></a>JDK内置注解</h2><h3 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h3><ul><li>检查该方法是否为父类方法的重写方法</li></ul><h3 id="Deprecated"><a href="#Deprecated" class="headerlink" title="@Deprecated"></a>@Deprecated</h3><ul><li>表示该方法已过时，不推荐使用，但仍能正常使用功能</li></ul><h3 id="SuppressWarnings"><a href="#SuppressWarnings" class="headerlink" title="@SuppressWarnings"></a>@SuppressWarnings</h3><ul><li>压制警告</li></ul><h4 id="压制所有警告"><a href="#压制所有警告" class="headerlink" title="压制所有警告"></a>压制所有警告</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"all"</span>)</span><br></pre></td></tr></table></figure><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><ul><li>是定义注解的注解</li></ul><h4 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h4><ul><li>定义注解的使用范围</li></ul><blockquote><p>参数</p><blockquote><p>ElementType.TYPE：作用于类上<br>ElementType.METHOD：作用于方法上<br>ElementType.FIELD：作用于属性上</p></blockquote></blockquote><h4 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h4><ul><li>定义注解的生命周期</li></ul><h3 id="定义注解"><a href="#定义注解" class="headerlink" title="定义注解"></a>定义注解</h3><blockquote><p><code>&lt;name&gt;</code>：注解名</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@interface</span> &lt;name&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果没定义默认值，则必须在使用注解的时候赋值</li></ul><h3 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h3><blockquote><p><code>&lt;class&gt;</code>：类名</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@&lt;name&gt;(value, age=<span class="number">0</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> &lt;<span class="title">class</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/07/27/%E6%B3%A8%E8%A7%A3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【笔记】Junit单元测试</title>
      <link>https://feiju12138.github.io/2020/07/27/Junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <guid>https://feiju12138.github.io/2020/07/27/Junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <pubDate>Mon, 27 Jul 2020 12:57:58 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Java Junit 单元测试 学习笔记&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java Junit 单元测试 学习笔记</p><a id="more"></a><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><ol><li><p>定义一个测试类，类名通常为<code>被测试类名Test</code>，包名通常为<code>被测试包名.test</code></p></li><li><p>定义测试方法，方法名通常为<code>test被测试方法名()</code>，返回值为<code>void</code>，参数列表为空</p></li><li><p>添加注解<code>@Junit</code></p></li><li><p>倒入Junit依赖</p></li></ol><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><ul><li>断言一个结果，与测试的结果做对比，从而判断程序是否有错误，而不是直接输出结果到控制台</li></ul><blockquote><p><code>&lt;think&gt;</code>：断言的结果<br><code>&lt;result&gt;</code>：程序返回的结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Assert.assertEuqals(&lt;think&gt;, &lt;result&gt;);</span><br></pre></td></tr></table></figure><ul><li>当断言失败时，控制台会打印异常</li></ul><h3 id="初始化方法"><a href="#初始化方法" class="headerlink" title="初始化方法"></a>初始化方法</h3><ul><li>在所有测试方法执行之前执行该方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="资源释放方法"><a href="#资源释放方法" class="headerlink" title="资源释放方法"></a>资源释放方法</h3><ul><li>在所有测试方法执行之后执行该方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@After</span></span><br><span class="line"><span class="function">publuc <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.bilibili.com/video/BV1uJ411k7wy?p=460" target="_blank" rel="noopener">哔哩哔哩——黎曼的猜想</a></p>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/07/27/Junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
