<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>绯鞠的博客</title>
    <link>https://feiju12138.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>捕捉一只爱折腾的绯鞠</description>
    <pubDate>Wed, 30 Sep 2020 08:05:40 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>【代码】简单模拟@ResponseBody底层效果</title>
      <link>https://feiju12138.github.io/2020/09/30/%E7%AE%80%E5%8D%95%E6%A8%A1%E6%8B%9F-ResponseBody%E5%BA%95%E5%B1%82%E6%95%88%E6%9E%9C/</link>
      <guid>https://feiju12138.github.io/2020/09/30/%E7%AE%80%E5%8D%95%E6%A8%A1%E6%8B%9F-ResponseBody%E5%BA%95%E5%B1%82%E6%95%88%E6%9E%9C/</guid>
      <pubDate>Wed, 30 Sep 2020 07:59:12 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;SpringBoot项目中，当使用@ResponseBody注解描述控制层方法时，用于告诉Spring框架，这个方法返回值可以按照特定格式（例如JSON）进行转换，将转换以后的结果写到response对象的相应体中&lt;br&gt;方法的返回值不在封装为ModelAndView对象，不会再交给解析器进行解析，而是直接基于response对象响应到客户端&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SpringBoot项目中，当使用@ResponseBody注解描述控制层方法时，用于告诉Spring框架，这个方法返回值可以按照特定格式（例如JSON）进行转换，将转换以后的结果写到response对象的相应体中<br>方法的返回值不在封装为ModelAndView对象，不会再交给解析器进行解析，而是直接基于response对象响应到客户端</p><a id="more"></a><h2 id="标注后代码"><a href="#标注后代码" class="headerlink" title="标注后代码"></a>标注后代码</h2><ul><li>通过返回对象，底层会自动将处理结果响应到客户端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">doPrint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"username"</span>,<span class="string">"刘德华"</span>);</span><br><span class="line">    map.put(<span class="string">"state"</span>,<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标注前代码"><a href="#标注前代码" class="headerlink" title="标注前代码"></a>标注前代码</h2><ul><li>底层实现的代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPrint</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"username"</span>,<span class="string">"刘德华"</span>);</span><br><span class="line">    map.put(<span class="string">"state"</span>,<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 将map中的数据转换为json格式字符串</span></span><br><span class="line">    ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    String jsonStr = objectMapper.writeValueAsString(map);</span><br><span class="line">    <span class="comment">// 设置响应数据的编码</span></span><br><span class="line">    <span class="comment">//response.setCharacterEncoding("utf-8");</span></span><br><span class="line">    <span class="comment">// 告诉客户端相应数据类型为text/html，编码为utf-8，请以这种编码形式进行数据呈现</span></span><br><span class="line">    response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">    <span class="comment">// 将字符串响应到客户端</span></span><br><span class="line">    response.getWriter().println(jsonStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/09/30/%E7%AE%80%E5%8D%95%E6%A8%A1%E6%8B%9F-ResponseBody%E5%BA%95%E5%B1%82%E6%95%88%E6%9E%9C/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【笔记】SpringBoot项目修改Banner图</title>
      <link>https://feiju12138.github.io/2020/09/29/SpringBoot%E9%A1%B9%E7%9B%AE%E4%BF%AE%E6%94%B9Banner%E5%9B%BE/</link>
      <guid>https://feiju12138.github.io/2020/09/29/SpringBoot%E9%A1%B9%E7%9B%AE%E4%BF%AE%E6%94%B9Banner%E5%9B%BE/</guid>
      <pubDate>Tue, 29 Sep 2020 08:06:17 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;SpringBoot项目修改Banner图&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SpringBoot项目修改Banner图</p><a id="more"></a><h2 id="修改Banner图"><a href="#修改Banner图" class="headerlink" title="修改Banner图"></a>修改Banner图</h2><ul><li>在项目的<code>resources</code>目录下创建<code>banner.txt</code>、<code>banner.gif</code>、<code>banner.jpg</code>、<code>banner.png</code>的其中一种文件，SpringBoot会自动加载</li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://juejin.im/post/6844903840936886280" target="_blank" rel="noopener">掘金——静默虚空</a><br><a href="https://www.bootschool.net/ascii-art" target="_blank" rel="noopener">BootSchool</a></p>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/09/29/SpringBoot%E9%A1%B9%E7%9B%AE%E4%BF%AE%E6%94%B9Banner%E5%9B%BE/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【笔记】IDEA在创建Maven项目后添加依赖</title>
      <link>https://feiju12138.github.io/2020/09/29/IDEA%E5%9C%A8%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE%E5%90%8E%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96/</link>
      <guid>https://feiju12138.github.io/2020/09/29/IDEA%E5%9C%A8%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE%E5%90%8E%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96/</guid>
      <pubDate>Tue, 29 Sep 2020 02:04:56 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;IDEA在创建Maven项目后，使用插件，实现自动添加依赖&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>IDEA在创建Maven项目后，使用插件，实现自动添加依赖</p><a id="more"></a><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><ul><li><code>Intellij IDEA</code>-&gt;<code>Preferences</code>-&gt;<code>Plugins</code>-&gt;<code>Marketplace</code>-&gt;搜索<code>EditStarters</code>-&gt;<code>Install</code></li></ul><p><img src="/images/20200929100456/01.png" alt="01.png"></p><ul><li>打开项目<code>pom.xml</code>文件-&gt;将光标移到<code>&lt;dependencies&gt;&lt;/denpendencies&gt;</code>标签内-&gt;MacOS使用快捷键<code>ctrl</code>+<code>return</code>（或<code>command</code>+<code>n</code>），Windows使用<code>alt</code>+<code>insert</code>-&gt;<code>Edit Starters</code></li></ul><p><img src="/images/20200929100456/02.png" alt="02.png"></p><ul><li>修改starter源-&gt;<code>OK</code></li></ul><p><img src="/images/20200929100456/03.png" alt="03.png"></p><ul><li>双击进行添加依赖或移除依赖</li></ul><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/w1043203101/article/details/79688848" target="_blank" rel="noopener">CSDN——许洛以合</a><br><a href="https://blog.csdn.net/weixin_30363263/article/details/84380805" target="_blank" rel="noopener">CSDN——山鬼谣弋痕夕</a></p>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/09/29/IDEA%E5%9C%A8%E5%88%9B%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE%E5%90%8E%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【骚操作】破解 Kali Linux 开机密码</title>
      <link>https://feiju12138.github.io/2020/09/28/%E7%A0%B4%E8%A7%A3KaliLinux%E5%BC%80%E6%9C%BA%E5%AF%86%E7%A0%81/</link>
      <guid>https://feiju12138.github.io/2020/09/28/%E7%A0%B4%E8%A7%A3KaliLinux%E5%BC%80%E6%9C%BA%E5%AF%86%E7%A0%81/</guid>
      <pubDate>Mon, 28 Sep 2020 11:52:18 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;破解&lt;code&gt;Kali Linux&lt;/code&gt;开机密码&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>破解<code>Kali Linux</code>开机密码</p><a id="more"></a><h2 id="修改启动参数"><a href="#修改启动参数" class="headerlink" title="修改启动参数"></a>修改启动参数</h2><ul><li><p>开机后，在进入登录界面前的命令行界面时，按e键进入启动参数编辑界面</p></li><li><p>将光标移到<code>linux /boot ...</code>行，修改<code>ro</code>为<code>rw</code>，并将其后所有字符串删除，修改为<code>init=/bin/bash</code></p></li></ul><p><img src="/images/20200928195218/01.png" alt="01.png"></p><ul><li><code>ctrl</code>+<code>x</code>保存并退出</li></ul><h2 id="修改新密码"><a href="#修改新密码" class="headerlink" title="修改新密码"></a>修改新密码</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><ul><li>重启系统</li></ul><h2 id="完成-1"><a href="#完成-1" class="headerlink" title="完成"></a>完成</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/wy_bk/article/details/88901882" target="_blank" rel="noopener">CSDN——zhaokaifeng.com</a></p>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/09/28/%E7%A0%B4%E8%A7%A3KaliLinux%E5%BC%80%E6%9C%BA%E5%AF%86%E7%A0%81/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【代码】SpringBoot项目使用Hikari连接池</title>
      <link>https://feiju12138.github.io/2020/09/28/SpringBoot%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8Hikari%E8%BF%9E%E6%8E%A5%E6%B1%A0/</link>
      <guid>https://feiju12138.github.io/2020/09/28/SpringBoot%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8Hikari%E8%BF%9E%E6%8E%A5%E6%B1%A0/</guid>
      <pubDate>Mon, 28 Sep 2020 11:31:04 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;SpringBoot项目整合数据库连接池后，默认使用Hikari连接池&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SpringBoot项目整合数据库连接池后，默认使用Hikari连接池</p><a id="more"></a><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li><a href="/2020/08/28/SpringBoot整合数据库连接池/">传送门</a></li></ul><h2 id="使用连接池实现查询"><a href="#使用连接池实现查询" class="headerlink" title="使用连接池实现查询"></a>使用连接池实现查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span><span class="comment">// 描述数据层实现类对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultGoodsDao</span> <span class="keyword">implements</span> <span class="title">GoodsDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询商品信息，一行记录映射为内存中的一个map对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; findGoods() &#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 获取连接</span></span><br><span class="line">            Connection connection = dataSource.getConnection();</span><br><span class="line">            <span class="comment">//2. 创建statement对象</span></span><br><span class="line">            Statement statement = connection.createStatement();</span><br><span class="line">            <span class="comment">//3. 发送sql</span></span><br><span class="line">            ResultSet resultSet = statement.executeQuery(<span class="string">"SELECT * FROM tb_goods"</span>);</span><br><span class="line">            <span class="comment">//4. 处理结果</span></span><br><span class="line">            <span class="keyword">while</span>(resultSet.next()) &#123;</span><br><span class="line">                <span class="keyword">int</span> id = resultSet.getInt(<span class="string">"id"</span>);</span><br><span class="line">                String name = resultSet.getString(<span class="string">"name"</span>);</span><br><span class="line">                String remark = resultSet.getString(<span class="string">"remark"</span>);</span><br><span class="line">                Time createdTime = resultSet.getTime(<span class="string">"createdTime"</span>);</span><br><span class="line">                <span class="comment">//System.out.println("id:"+id+" name:"+name+" remark:"+remark+" createdTime"+createdTime);</span></span><br><span class="line">                Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                map.put(<span class="string">"id"</span>, id);</span><br><span class="line">                map.put(<span class="string">"name"</span>, name);</span><br><span class="line">                map.put(<span class="string">"remark"</span>, remark);</span><br><span class="line">                map.put(<span class="string">"createdTime"</span>, createdTime);</span><br><span class="line">                list.add(map);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//5. 释放资源</span></span><br><span class="line">            resultSet.close();</span><br><span class="line">            statement.close();</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进行简单的封装"><a href="#进行简单的封装" class="headerlink" title="进行简单的封装"></a>进行简单的封装</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultGoodsDao</span> <span class="keyword">implements</span>  <span class="title">GoodsDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;<span class="comment">//hikariCP</span></span><br><span class="line">    <span class="comment">/**查询商品信息,一行记录映射为内存中的一个map对象*/</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; findGoods()&#123;</span><br><span class="line">        Connection conn=<span class="keyword">null</span>;<span class="comment">//java.sql.*</span></span><br><span class="line">        Statement stmt=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs=<span class="keyword">null</span>;</span><br><span class="line">        String sql=<span class="string">"select id,name,remark note,createdTime from tb_goods"</span>;</span><br><span class="line">        <span class="comment">//1.获取连接(从连接池获取)</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn=dataSource.getConnection();</span><br><span class="line">            <span class="comment">//2.创建statement对象</span></span><br><span class="line">            stmt=conn.createStatement();</span><br><span class="line">            <span class="comment">//3.发送sql</span></span><br><span class="line">            rs=stmt.executeQuery(sql);</span><br><span class="line">            <span class="comment">//4.处理结果</span></span><br><span class="line">            List&lt;Map&lt;String,Object&gt;&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;<span class="comment">//循环一次取一行,一行记录映射为一个map对象</span></span><br><span class="line">                list.add( rowMap(rs));<span class="comment">//将存储了一行记录的map对象再存储到list集合</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);<span class="comment">//转换为非检查异常(编译时不检测的异常)</span></span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//5. 释放资源</span></span><br><span class="line">            close(rs,stmt,conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String,Object&gt; <span class="title">rowMap</span><span class="params">(ResultSet rs)</span><span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; rowMap=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//方法1映射</span></span><br><span class="line">        <span class="comment">//rowMap.put("id",rs.getInt("id"));</span></span><br><span class="line">        <span class="comment">//rowMap.put("name",rs.getString("name"));</span></span><br><span class="line">        <span class="comment">//rowMap.put("remark",rs.getString("remark"));</span></span><br><span class="line">        <span class="comment">//rowMap.put("createdTime",rs.getTimestamp("createdTime"));</span></span><br><span class="line">        <span class="comment">//方法2映射</span></span><br><span class="line">        ResultSetMetaData rsmd=rs.getMetaData();<span class="comment">//获取元数据(包括表中的字段名)</span></span><br><span class="line">        <span class="keyword">int</span> columnCount=rsmd.getColumnCount();<span class="comment">//获取列的数量</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;columnCount;i++)&#123;</span><br><span class="line">            rowMap.put(rsmd.getColumnLabel(i+<span class="number">1</span>),rs.getObject(rsmd.getColumnLabel(i+<span class="number">1</span>)));</span><br><span class="line">            <span class="comment">//getColumnLabel(i+1);获取表中字段名或字段名对应的别名</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rowMap;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs,Statement stmt,Connection conn)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)<span class="keyword">try</span>&#123;rs.close();&#125;<span class="keyword">catch</span>(Exception e)&#123;e.printStackTrace();&#125;</span><br><span class="line">        <span class="keyword">if</span>(stmt!=<span class="keyword">null</span>)<span class="keyword">try</span>&#123;stmt.close();&#125;<span class="keyword">catch</span>(Exception e)&#123;e.printStackTrace();&#125;</span><br><span class="line">        <span class="comment">//这里的连接是返回到了池中</span></span><br><span class="line">        <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)<span class="keyword">try</span>&#123;conn.close();&#125;<span class="keyword">catch</span>(Exception e)&#123;e.printStackTrace();&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/09/28/SpringBoot%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8Hikari%E8%BF%9E%E6%8E%A5%E6%B1%A0/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
