<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>绯鞠的博客</title>
    <link>https://feiju12138.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>捕捉一只爱折腾的绯鞠</description>
    <pubDate>Mon, 02 Nov 2020 00:37:20 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>【笔记】Mybatis Plus 学习笔记</title>
      <link>https://feiju12138.github.io/2020/10/30/MybatisPlus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <guid>https://feiju12138.github.io/2020/10/30/MybatisPlus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Fri, 30 Oct 2020 04:48:54 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。（(官网)[&lt;a href=&quot;https://baomidou.com]）&quot;&gt;https://baomidou.com]）&lt;/a&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。（(官网)[<a href="https://baomidou.com]）">https://baomidou.com]）</a></p><a id="more"></a><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="配置依赖"><a href="#配置依赖" class="headerlink" title="配置依赖"></a>配置依赖</h3><ul><li>创建SpringBoot项目，编辑<code>pom.xml</code>文件，不引入（或在已有项目清除）Mybatis的依赖，然后配置MybatisPlus依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建POJO类"><a href="#创建POJO类" class="headerlink" title="创建POJO类"></a>创建POJO类</h3><ul><li>根据数据表的字段名作为属性，创建POJO类</li><li>在类上标注<code>@TableName</code>注解，标识对象与表的映射关系，如果表名与对象名相同则可以省略不写</li><li>在主键对应的属性上标注<code>@TableId</code>注解，标识主键</li><li>在其他属性上标注<code>@TableField</code>注解，标识字段，如果字段名与属性名相同可以省略不写</li></ul><blockquote><p><code>type = IdType.AUTO</code>：标识主键自增<br><code>value = &quot;id&quot;</code>、<code>value = &quot;name&quot;</code>：标识属性对应的字段名。如果属性名与字段名相同，可以省略不写这个参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId</span>(type = IdType.AUTO, value = <span class="string">"id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField</span>(value = <span class="string">"name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>省略后的POJO类创建</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId</span>(type = IdType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dao层Mapper的配置"><a href="#Dao层Mapper的配置" class="headerlink" title="Dao层Mapper的配置"></a>Dao层Mapper的配置</h3><ul><li>在主启动类添加Mapper扫描注解</li></ul><blockquote><p><code>com.jt.mapper</code>：指定存放Mapper接口的包</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.jt.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootDemo2Application</span> </span>&#123;</span><br></pre></td></tr></table></figure><ul><li>（并在已有项目去除@Mapper注解）</li><li>在Mapper接口继承<code>BaseMapper</code>类</li></ul><blockquote><p><code>User</code>：POJO类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br></pre></td></tr></table></figure><h3 id="配置全局配置文件"><a href="#配置全局配置文件" class="headerlink" title="配置全局配置文件"></a>配置全局配置文件</h3><ul><li>编辑<code>application.yml</code>全局配置文件</li><li>将原来mybatis项目的配置中<code>mybatis</code>改为<code>mybatis-plus</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="comment"># 别名包定义 Mapper的resultType中只需要写类名 之后自动拼接即可</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.jt.pojo</span></span><br><span class="line">  <span class="comment"># 加载指定的xml映射文件</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mybatis/mappers/*.xml</span></span><br><span class="line">  <span class="comment"># 开启驼峰映射</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="启动log"><a href="#启动log" class="headerlink" title="启动log"></a>启动log</h4><blockquote><p><code>com.jt.mapper</code>：指定存放Mapper接口的包</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.jt.mapper:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h3 id="业务层使用内置的方法"><a href="#业务层使用内置的方法" class="headerlink" title="业务层使用内置的方法"></a>业务层使用内置的方法</h3><ul><li>MybatisPlus提供了很多封装简单SQL语句的方法，可以直接调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Mybatis-Plus-API-实现增删改查"><a href="#Mybatis-Plus-API-实现增删改查" class="headerlink" title="Mybatis Plus API 实现增删改查"></a>Mybatis Plus API 实现增删改查</h2><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><h4 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h4><ul><li>返回POJO对象的集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userMapper.selectList(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><blockquote><p>逻辑运算符</p><blockquote><p><code>eq</code>：相等<br><code>gt</code>：大于<br><code>lt</code>：小于<br><code>ge</code>：大于等于<br><code>le</code>：小于等于</p></blockquote></blockquote><blockquote><p><code>sex</code>：列名<br><code>女</code>：列值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">queryWrapper.eq(<span class="string">"sex"</span>, <span class="string">"女"</span>).gt(<span class="string">"age"</span>, <span class="number">18</span>);</span><br><span class="line">userMapper.selectList(queryWrapper);</span><br></pre></td></tr></table></figure><h4 id="根据id查询"><a href="#根据id查询" class="headerlink" title="根据id查询"></a>根据id查询</h4><ul><li>返回一个POJO对象</li></ul><blockquote><p><code>&lt;id&gt;</code>：int类型的id值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userMapper.selectById(&lt;id&gt;);</span><br></pre></td></tr></table></figure><h4 id="根据多条id查询"><a href="#根据多条id查询" class="headerlink" title="根据多条id查询"></a>根据多条id查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">userMapper.selectBatchIds(list);</span><br></pre></td></tr></table></figure><h4 id="统计查询到的数据数"><a href="#统计查询到的数据数" class="headerlink" title="统计查询到的数据数"></a>统计查询到的数据数</h4><blockquote><p><code>null</code>：也可以添加queryWrapper对象的参数，作为查询条件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userMapper.selectCount(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><ul><li>返回执行成功的行数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setName(<span class="string">"貂蝉"</span>);</span><br><span class="line">user.setAge(<span class="number">18</span>);</span><br><span class="line">user.setSex(<span class="string">"女"</span>);</span><br><span class="line">userMapper.insert(user);</span><br></pre></td></tr></table></figure><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><ul><li>返回执行成功的行数</li></ul><h4 id="根据id删除"><a href="#根据id删除" class="headerlink" title="根据id删除"></a>根据id删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userMapper.deleteById(&lt;id&gt;);</span><br></pre></td></tr></table></figure><h4 id="根据多条id删除"><a href="#根据多条id删除" class="headerlink" title="根据多条id删除"></a>根据多条id删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">51</span>);</span><br><span class="line">list.add(<span class="number">52</span>);</span><br><span class="line">userMapper.deleteBatchIds(list);</span><br></pre></td></tr></table></figure><h4 id="根据条件删除"><a href="#根据条件删除" class="headerlink" title="根据条件删除"></a>根据条件删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QueryWrapper queryWrapper = <span class="keyword">new</span> QueryWrapper();</span><br><span class="line">queryWrapper.eq(<span class="string">"id"</span>, <span class="number">50</span>);</span><br><span class="line">userMapper.delete(queryWrapper);</span><br></pre></td></tr></table></figure><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装修改后的数据为POJO对象</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setName(<span class="string">"貂蝉"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过查询条件查找原数据</span></span><br><span class="line">QueryWrapper queryWrapper = <span class="keyword">new</span> QueryWrapper();</span><br><span class="line">queryWrapper.eq(<span class="string">"id"</span>, <span class="number">49</span>);</span><br><span class="line"></span><br><span class="line">userMapper.update(user, queryWrapper)</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/qq_16804847/article/details/109378783" target="_blank" rel="noopener">CSDN——闪耀太阳</a></p>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/10/30/MybatisPlus%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【笔记】SpringBoot配置文件的环境切换</title>
      <link>https://feiju12138.github.io/2020/10/29/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E7%8E%AF%E5%A2%83%E5%88%87%E6%8D%A2/</link>
      <guid>https://feiju12138.github.io/2020/10/29/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E7%8E%AF%E5%A2%83%E5%88%87%E6%8D%A2/</guid>
      <pubDate>Thu, 29 Oct 2020 07:04:59 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;SpringBoot配置文件的环境切换&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SpringBoot配置文件的环境切换</p><a id="more"></a><h2 id="环境切换"><a href="#环境切换" class="headerlink" title="环境切换"></a>环境切换</h2><ul><li>只能在<code>.yml</code>配置文件中进行多环境配置</li><li>通过<code>---</code>将多套配置文件分割</li><li>通过<code>profiles</code>配置定义当前配置的名称</li><li>通过<code>active</code>配置定义首选配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/10/29/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E7%8E%AF%E5%A2%83%E5%88%87%E6%8D%A2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【笔记】MacOS校验文件的SHA1值</title>
      <link>https://feiju12138.github.io/2020/10/28/MacOS%E6%A0%A1%E9%AA%8C%E6%96%87%E4%BB%B6%E7%9A%84SHA1%E5%80%BC/</link>
      <guid>https://feiju12138.github.io/2020/10/28/MacOS%E6%A0%A1%E9%AA%8C%E6%96%87%E4%BB%B6%E7%9A%84SHA1%E5%80%BC/</guid>
      <pubDate>Wed, 28 Oct 2020 07:00:03 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;MacOS校验文件的SHA1值&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>MacOS校验文件的SHA1值</p><a id="more"></a><h2 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h2><blockquote><p><code>&lt;file&gt;</code>：需要校验的文件</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shasum &lt;file&gt;</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/aptentity/article/details/70545070" target="_blank" rel="noopener">CSDN——aptentity</a></p>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/10/28/MacOS%E6%A0%A1%E9%AA%8C%E6%96%87%E4%BB%B6%E7%9A%84SHA1%E5%80%BC/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【笔记】Spring MVC 拦截器</title>
      <link>https://feiju12138.github.io/2020/10/28/SpringMVC%E6%8B%A6%E6%88%AA%E5%99%A8/</link>
      <guid>https://feiju12138.github.io/2020/10/28/SpringMVC%E6%8B%A6%E6%88%AA%E5%99%A8/</guid>
      <pubDate>Wed, 28 Oct 2020 00:43:05 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Spring MVC 拦截器 学习笔记&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Spring MVC 拦截器 学习笔记</p><a id="more"></a><h2 id="定义拦截器类"><a href="#定义拦截器类" class="headerlink" title="定义拦截器类"></a>定义拦截器类</h2><ul><li>创建一个类，实现<code>HandlerInterceptor</code>接口，重写<code>preHandle</code>方法，这个方法会在Controller的方法执行之前执行</li></ul><blockquote><p><code>true</code>：true表示放行，false表示请求到此结束</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeAccessInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加到配置类"><a href="#添加到配置类" class="headerlink" title="添加到配置类"></a>添加到配置类</h2><ul><li>创建一个类，实现<code>WebMvcConfigurer</code>接口，重写<code>addInterceptors</code>方法</li></ul><blockquote><p><code>new TimeAccessInterceptor()</code>：配置拦截器对象<br><code>/user/doLogin</code>：配置拦截的路径</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringWebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> TimeAccessInterceptor()).addPathPatterns(<span class="string">"/user/doLogin"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/10/28/SpringMVC%E6%8B%A6%E6%88%AA%E5%99%A8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【笔记】Shiro学习笔记</title>
      <link>https://feiju12138.github.io/2020/10/26/Shiro%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <guid>https://feiju12138.github.io/2020/10/26/Shiro%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Mon, 26 Oct 2020 11:54:09 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Shiro框架学习笔记&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Shiro框架学习笔记</p><a id="more"></a><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.6.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="Shiro配置类"><a href="#Shiro配置类" class="headerlink" title="Shiro配置类"></a>Shiro配置类</h2><ul><li><p>也可以在配置文件进行配置</p></li><li><p>新建一个类作为Shiro的配置类，并由<code>@Configuration</code>注解标注</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringShiroConfig</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Shiro核心配置对象"><a href="#Shiro核心配置对象" class="headerlink" title="Shiro核心配置对象"></a>Shiro核心配置对象</h2><ul><li>在配置类中创建配置Shiro核心对象的方法，并交给Spring管理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">    DefaultWebSecurityManager securityManager=<span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">    <span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Shiro访问规则配置"><a href="#Shiro访问规则配置" class="headerlink" title="Shiro访问规则配置"></a>Shiro访问规则配置</h2><ul><li>在配置类中创建配置Shiro访问规则的方法，配置匿名访问的资源和认证的访问的资源，并交给Spring管理</li></ul><blockquote><p>Shiro中默认过滤器</p><blockquote><p><code>anon</code>：允许匿名访问<br><code>authc</code>：需要认证后访问<br><code>logout</code>：退出过滤器，一旦执行了退出操作，底层会将系统服务端存储的用户信息进行清除并且直接跳转到登陆页面</p></blockquote></blockquote><blockquote><p><code>**</code>：表示当前目录所有文件及其所有子目录</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilterFactory</span><span class="params">( SecurityManager securityManager)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    ShiroFilterFactoryBean factoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">    <span class="comment">// securityManager对象负责去检测这个请求是否已经认证</span></span><br><span class="line">    factoryBean.setSecurityManager(securityManager);</span><br><span class="line">    <span class="comment">// 配置登陆页面的访问路径</span></span><br><span class="line">    factoryBean.setLoginUrl(<span class="string">"/doLoginUI"</span>);</span><br><span class="line"></span><br><span class="line">    Map&lt;String,String&gt; filterMap=<span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// 配置允许匿名访问的资源（通常为所有的静态资源）</span></span><br><span class="line">    filterMap.put(<span class="string">"/build/**"</span>,<span class="string">"anon"</span>);</span><br><span class="line">    <span class="comment">// 配置登陆</span></span><br><span class="line">    filterMap.put(<span class="string">"/user/doLogin"</span>,<span class="string">"anon"</span>);</span><br><span class="line">    <span class="comment">// 配置退出</span></span><br><span class="line">    filterMap.put(<span class="string">"/doLogout"</span>,<span class="string">"logout"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 除了匿名访问的资源,其它都要认证后访问</span></span><br><span class="line">    filterMap.put(<span class="string">"/**"</span>,<span class="string">"authc"</span>);</span><br><span class="line">    </span><br><span class="line">    factoryBean.setFilterChainDefinitionMap(filterMap);<span class="comment">//过滤链的定义</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> factoryBean;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现认证"><a href="#实现认证" class="headerlink" title="实现认证"></a>实现认证</h2><h3 id="创建Realm类"><a href="#创建Realm类" class="headerlink" title="创建Realm类"></a>创建Realm类</h3><ul><li>在<code>service.impl</code>包下创建一个Realm类，继承AuthorizingRealm类并重写抽象方法，为这个类标注<code>@Component</code>注解定义为组建交给Spring管理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroUserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取并封装授权信息（做授权业务时写此方法）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取并封装认证信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取登录时输入的用户名</span></span><br><span class="line">        UsernamePasswordToken uToken = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        String username = uToken.getUsername();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 基于用户名查询数据库中的用户信息</span></span><br><span class="line">        SysUser user = sysUserDao.findUserByUserName(username);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 校验用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException();</span><br><span class="line">        <span class="comment">// 校验用户是否已被禁用</span></span><br><span class="line">        <span class="keyword">if</span> (user.getValid() == <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> LockedAccountException();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 封装用户信息由底层进行密码校验</span></span><br><span class="line">        ByteSource credentialsSalt = ByteSource.Util.bytes(user.getSalt());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user,<span class="comment">//principal 身份</span></span><br><span class="line">                user.getPassword(),<span class="comment">//hashedCredentials 已加密的密码</span></span><br><span class="line">                credentialsSalt,<span class="comment">//credentialsSalt 凭证盐</span></span><br><span class="line">                getName());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对用户输入的密码进行加密"><a href="#对用户输入的密码进行加密" class="headerlink" title="对用户输入的密码进行加密"></a>对用户输入的密码进行加密</h3><ul><li>重写getCredentialsMatcher方法或setCredentialsMatcher方法其中一个，用于返回凭证加密对象，基于此对象对用户输入的密码进行加密操作</li></ul><h4 id="重写getCredentialsMatcher方法"><a href="#重写getCredentialsMatcher方法" class="headerlink" title="重写getCredentialsMatcher方法"></a>重写getCredentialsMatcher方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CredentialsMatcher <span class="title">getCredentialsMatcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HashedCredentialsMatcher credentialsMatcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">    <span class="comment">// 定义加密类型</span></span><br><span class="line">    credentialsMatcher.setHashAlgorithmName(<span class="string">"MD5"</span>);</span><br><span class="line">    <span class="comment">// 定义加密次数</span></span><br><span class="line">    credentialsMatcher.setHashIterations(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> credentialsMatcher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重写getCredentialsMatcher方法-1"><a href="#重写getCredentialsMatcher方法-1" class="headerlink" title="重写getCredentialsMatcher方法"></a>重写getCredentialsMatcher方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCredentialsMatcher</span><span class="params">(CredentialsMatcher credentialsMatcher)</span> </span>&#123;</span><br><span class="line">    HashedCredentialsMatcher cMatcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">    <span class="comment">// 定义加密类型</span></span><br><span class="line">    cMatcher.setHashAlgorithmName(<span class="string">"MD5"</span>);</span><br><span class="line">    <span class="comment">// 定义加密次数</span></span><br><span class="line">    cMatcher.setHashIterations(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">super</span>.setCredentialsMatcher(cMatcher);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将Realm添加到配置类"><a href="#将Realm添加到配置类" class="headerlink" title="将Realm添加到配置类"></a>将Realm添加到配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">(Realm realm)</span> </span>&#123;</span><br><span class="line">    DefaultWebSecurityManager sManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">    sManager.setRealm(realm);</span><br><span class="line">    <span class="keyword">return</span> sManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现授权"><a href="#实现授权" class="headerlink" title="实现授权"></a>实现授权</h2><h3 id="在配置类配置授权检测顾问"><a href="#在配置类配置授权检测顾问" class="headerlink" title="在配置类配置授权检测顾问"></a>在配置类配置授权检测顾问</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title">authorizationAttributeSourceAdvisor</span><span class="params">(SecurityManager securityManager)</span></span>&#123;</span><br><span class="line">      AuthorizationAttributeSourceAdvisor advisor=<span class="keyword">new</span> AuthorizationAttributeSourceAdvisor();</span><br><span class="line">      advisor.setSecurityManager(securityManager);</span><br><span class="line">      <span class="keyword">return</span> advisor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Shiro配置缓存（Cache）"><a href="#Shiro配置缓存（Cache）" class="headerlink" title="Shiro配置缓存（Cache）"></a>Shiro配置缓存（Cache）</h2><h3 id="在配置类配置缓存"><a href="#在配置类配置缓存" class="headerlink" title="在配置类配置缓存"></a>在配置类配置缓存</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CacheManager <span class="title">shiroCacheManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MemoryConstrainedCacheManager();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将Cache配置添加到核心对象"><a href="#将Cache配置添加到核心对象" class="headerlink" title="将Cache配置添加到核心对象"></a>将Cache配置添加到核心对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">(CacheManager cacheManager)</span> </span>&#123;</span><br><span class="line">    DefaultWebSecurityManager sManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">    sManager.setCacheManager(cacheManager);</span><br><span class="line">    <span class="keyword">return</span> sManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现记住我"><a href="#实现记住我" class="headerlink" title="实现记住我"></a>实现记住我</h2><h3 id="在配置类配置记住我"><a href="#在配置类配置记住我" class="headerlink" title="在配置类配置记住我"></a>在配置类配置记住我</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RememberMeManager <span class="title">rememberMeManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CookieRememberMeManager cManager = <span class="keyword">new</span> CookieRememberMeManager();</span><br><span class="line">    SimpleCookie cookie=<span class="keyword">new</span> SimpleCookie(<span class="string">"rememberMe"</span>);</span><br><span class="line">    cookie.setMaxAge(<span class="number">7</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">    cManager.setCookie(cookie);</span><br><span class="line">    <span class="keyword">return</span> cManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在核心对象配置记住我"><a href="#在核心对象配置记住我" class="headerlink" title="在核心对象配置记住我"></a>在核心对象配置记住我</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">(RememberMeManager rememberManager)</span> </span>&#123;</span><br><span class="line">    DefaultWebSecurityManager sManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">    sManager.setRememberMeManager(rememberManager);</span><br><span class="line">    <span class="keyword">return</span> sManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改访问规则"><a href="#修改访问规则" class="headerlink" title="修改访问规则"></a>修改访问规则</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//filterMap.put("/**","authc");</span></span><br><span class="line">filterMap.put(<span class="string">"/**"</span>,<span class="string">"user"</span>);</span><br></pre></td></tr></table></figure><h2 id="配置会话（Session）"><a href="#配置会话（Session）" class="headerlink" title="配置会话（Session）"></a>配置会话（Session）</h2><h3 id="在配置类配置会话"><a href="#在配置类配置会话" class="headerlink" title="在配置类配置会话"></a>在配置类配置会话</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> SessionManager <span class="title">sessionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DefaultWebSessionManager sManager = <span class="keyword">new</span> DefaultWebSessionManager();</span><br><span class="line">    sManager.setGlobalSessionTimeout(<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> sManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将Session配置添加到核心配置对象"><a href="#将Session配置添加到核心配置对象" class="headerlink" title="将Session配置添加到核心配置对象"></a>将Session配置添加到核心配置对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">(SessionManager sessionManager)</span> </span>&#123;</span><br><span class="line">    DefaultWebSecurityManager sManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">    sManager.setSessionManager(sessionManager);</span><br><span class="line">    <span class="keyword">return</span> sManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/10/26/Shiro%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
