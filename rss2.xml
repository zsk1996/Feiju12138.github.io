<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>绯鞠的博客</title>
    <link>https://feiju12138.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>捕捉一只爱折腾的绯鞠</description>
    <pubDate>Wed, 13 May 2020 02:54:36 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>【笔记】Session学习笔记</title>
      <link>https://feiju12138.github.io/2020/05/13/Session%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <guid>https://feiju12138.github.io/2020/05/13/Session%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Wed, 13 May 2020 02:39:12 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Session：在计算机中，尤其是在网络应用中，称为“会话控制”。Session对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的Web页之间跳转时，存储在Session对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web页时，如果该用户还没有会话，则Web服务器将自动创建一个 Session对象。当会话过期或被放弃后，服务器将终止该会话。Session 对象最常见的一个用法就是存储用户的首选项。例如，如果用户指明不喜欢查看图形，就可以将该信息存储在Session对象中。有关使用Session 对象的详细信息，请参阅“ASP应用程序”部分的“管理会话”。注意会话状态仅在支持cookie的浏览器中保留。（&lt;a href=&quot;https://baike.baidu.com/item/Session/479100&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;百度百科&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;用Javaweb实现Session&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Session：在计算机中，尤其是在网络应用中，称为“会话控制”。Session对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的Web页之间跳转时，存储在Session对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web页时，如果该用户还没有会话，则Web服务器将自动创建一个 Session对象。当会话过期或被放弃后，服务器将终止该会话。Session 对象最常见的一个用法就是存储用户的首选项。例如，如果用户指明不喜欢查看图形，就可以将该信息存储在Session对象中。有关使用Session 对象的详细信息，请参阅“ASP应用程序”部分的“管理会话”。注意会话状态仅在支持cookie的浏览器中保留。（<a href="https://baike.baidu.com/item/Session/479100" target="_blank" rel="noopener">百度百科</a>）</p><p>用Javaweb实现Session</p><a id="more"></a><h2 id="获取Session对象"><a href="#获取Session对象" class="headerlink" title="获取Session对象"></a>获取Session对象</h2><ul><li>因为Session是服务器自动创建的，所以不需要创建Session对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session = req.getSession();</span><br></pre></td></tr></table></figure><h2 id="查看Session编号"><a href="#查看Session编号" class="headerlink" title="查看Session编号"></a>查看Session编号</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.getID();</span><br></pre></td></tr></table></figure><h2 id="写入Session数据"><a href="#写入Session数据" class="headerlink" title="写入Session数据"></a>写入Session数据</h2><ul><li>Session是以键值对的形式存入的</li></ul><blockquote><p><code>&lt;key&gt;</code>：键，String类型<br><code>&lt;value&gt;</code>：值，Object类型</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">session.setAttribute(<span class="string">"&lt;key&gt;"</span>, <span class="string">"&lt;value&gt;"</span>);</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">## 读取Session数据</span><br><span class="line"></span><br><span class="line">- 返回Object类型</span><br><span class="line"></span><br><span class="line">``` java</span><br><span class="line">session.getAttribute(<span class="string">"&lt;key&gt;"</span>);</span><br></pre></td></tr></table></figure><h2 id="设置Session有效期"><a href="#设置Session有效期" class="headerlink" title="设置Session有效期"></a>设置Session有效期</h2><ul><li>Session有效期默认30分钟。如果值为-1，则为永不过期（浏览器未关闭的情况下）</li></ul><blockquote><p><code>&lt;num&gt;</code>：单位：秒</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.setMaxInactiveInterval(&lt;num&gt;);</span><br></pre></td></tr></table></figure><h3 id="统一设置Session有效期"><a href="#统一设置Session有效期" class="headerlink" title="统一设置Session有效期"></a>统一设置Session有效期</h3><ul><li>在web.xml配置Session有效期</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span><span class="tag">&lt;<span class="name">num</span>&gt;</span><span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>达内教育</p>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/05/13/Session%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【笔记】Cookie学习笔记</title>
      <link>https://feiju12138.github.io/2020/05/13/Cookie%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <guid>https://feiju12138.github.io/2020/05/13/Cookie%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Wed, 13 May 2020 02:25:08 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Cookie（复数形态Cookies），又称为“小甜饼”。类型为“小型文本文件”，指某些网站为了辨别用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。由网景公司的前雇员卢·蒙特利在1993年3月发明。最初定义于RFC 2109。当前使用最广泛的 Cookie标准却不是RFC中定义的任何一个，而是在网景公司制定的标准上进行扩展后的产物。（&lt;a href=&quot;https://zh.wikipedia.org/wiki/Cookie&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;维基百科&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;用Javaweb实现Cookie&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Cookie（复数形态Cookies），又称为“小甜饼”。类型为“小型文本文件”，指某些网站为了辨别用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。由网景公司的前雇员卢·蒙特利在1993年3月发明。最初定义于RFC 2109。当前使用最广泛的 Cookie标准却不是RFC中定义的任何一个，而是在网景公司制定的标准上进行扩展后的产物。（<a href="https://zh.wikipedia.org/wiki/Cookie" target="_blank" rel="noopener">维基百科</a>）</p><p>用Javaweb实现Cookie</p><a id="more"></a><h2 id="创建Cookie对象"><a href="#创建Cookie对象" class="headerlink" title="创建Cookie对象"></a>创建Cookie对象</h2><ul><li>Cookie都是由键值对构成的</li></ul><blockquote><p><code>&lt;key&gt;</code>：键<br><code>&lt;value&gt;</code>：值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"&lt;key&gt;"</span>, <span class="string">"&lt;value&gt;"</span>);</span><br></pre></td></tr></table></figure><h2 id="写入Cookie到客户端"><a href="#写入Cookie到客户端" class="headerlink" title="写入Cookie到客户端"></a>写入Cookie到客户端</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resp.addCookie(cookie);</span><br></pre></td></tr></table></figure><h2 id="读取Cookie"><a href="#读取Cookie" class="headerlink" title="读取Cookie"></a>读取Cookie</h2><ul><li>读取到的是Cookie数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookies[] = req.getCookies();</span><br></pre></td></tr></table></figure><h3 id="获取Cookie的名字"><a href="#获取Cookie的名字" class="headerlink" title="获取Cookie的名字"></a>获取Cookie的名字</h3><ul><li>返回String类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie.getName();</span><br></pre></td></tr></table></figure><h3 id="获取Cookie的值"><a href="#获取Cookie的值" class="headerlink" title="获取Cookie的值"></a>获取Cookie的值</h3><ul><li>返回String类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie.getValue();</span><br></pre></td></tr></table></figure><h2 id="设置Cookie有效期"><a href="#设置Cookie有效期" class="headerlink" title="设置Cookie有效期"></a>设置Cookie有效期</h2><blockquote><p><code>&lt;num&gt;</code>：单位：秒</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie.setMaxAge(&lt;num&gt;);</span><br></pre></td></tr></table></figure><h2 id="Cookie的注意事项"><a href="#Cookie的注意事项" class="headerlink" title="Cookie的注意事项"></a>Cookie的注意事项</h2><ul><li><p>Cookie存储的数据保存在客户端</p></li><li><p>单个Cookie大小不能超过4kb</p></li><li><p>一个域名最多可以往一个客户端写20个Cookie</p></li><li><p>Cookie只能存放安全性要求不高的信息，比如密码等信息不能直接保存在Cookie</p></li><li><p>不同浏览器读取不同的Cookie</p></li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>达内教育</p>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/05/13/Cookie%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【笔记】Servlet学习笔记</title>
      <link>https://feiju12138.github.io/2020/05/10/Servlet%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <guid>https://feiju12138.github.io/2020/05/10/Servlet%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Sun, 10 May 2020 02:30:51 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Servlet学习笔记&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Servlet学习笔记</p><a id="more"></a><h2 id="编写Servlet类"><a href="#编写Servlet类" class="headerlink" title="编写Servlet类"></a>编写Servlet类</h2><ul><li>继承<code>HttpServlet</code>类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h2><h3 id="处理GET请求"><a href="#处理GET请求" class="headerlink" title="处理GET请求"></a>处理GET请求</h3><ul><li>默认处理GET请求</li><li>重写<code>doGet</code>方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理POST请求"><a href="#处理POST请求" class="headerlink" title="处理POST请求"></a>处理POST请求</h3><ul><li>重写<code>doPost</code>方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置响应类型"><a href="#设置响应类型" class="headerlink" title="设置响应类型"></a>设置响应类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resp.setContentType(<span class="string">"text/html"</span>);</span><br></pre></td></tr></table></figure><h3 id="设置字符集"><a href="#设置字符集" class="headerlink" title="设置字符集"></a>设置字符集</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resp.setContentType(<span class="string">"text/html; charset=utf-8"</span>);</span><br></pre></td></tr></table></figure><h2 id="创建输出流对象"><a href="#创建输出流对象" class="headerlink" title="创建输出流对象"></a>创建输出流对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PrintWriter out = resp.getWriter();</span><br></pre></td></tr></table></figure><ul><li>输出到网页</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">out.println(<span class="string">"&lt;html&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;head&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;title&gt;&lt;/title&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;/head&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;body&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;/body&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;/html&gt;"</span>);</span><br></pre></td></tr></table></figure><h2 id="req的常用方法"><a href="#req的常用方法" class="headerlink" title="req的常用方法"></a>req的常用方法</h2><h3 id="设置请求编码"><a href="#设置请求编码" class="headerlink" title="设置请求编码"></a>设置请求编码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br></pre></td></tr></table></figure><h3 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h3><ul><li>请求参数为键值对，获取请求参数就是通过键获取值的过程</li></ul><blockquote><p><code>&lt;string&gt;</code>：参数名（键）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.getParameter(<span class="string">"&lt;string&gt;"</span>);</span><br></pre></td></tr></table></figure><h3 id="获取URL"><a href="#获取URL" class="headerlink" title="获取URL"></a>获取URL</h3><ul><li>返回StringBuffer类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.getRequestURL();</span><br></pre></td></tr></table></figure><h3 id="获取URI"><a href="#获取URI" class="headerlink" title="获取URI"></a>获取URI</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.getRequestURI();</span><br></pre></td></tr></table></figure><h3 id="获取所有的请求参数"><a href="#获取所有的请求参数" class="headerlink" title="获取所有的请求参数"></a>获取所有的请求参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.getQueryString();</span><br></pre></td></tr></table></figure><h3 id="获取ip地址"><a href="#获取ip地址" class="headerlink" title="获取ip地址"></a>获取ip地址</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.getRemoteAddr();</span><br></pre></td></tr></table></figure><h3 id="获取客户端主机名"><a href="#获取客户端主机名" class="headerlink" title="获取客户端主机名"></a>获取客户端主机名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.getRemoteHost();</span><br></pre></td></tr></table></figure><h3 id="获取客户端请求头"><a href="#获取客户端请求头" class="headerlink" title="获取客户端请求头"></a>获取客户端请求头</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Enumeration&lt;string&gt; reqHeaderNames = req.getHeaderNames();</span><br><span class="line"><span class="keyword">while</span>(reqHeaderNames.hasMoreElements()) &#123;</span><br><span class="line">    String headerNames = req.HeaderNames.nextElement();</span><br><span class="line">    String headerValue = req.getHeader(headerNames);</span><br><span class="line">    System.out.println(headerNames + <span class="string">":"</span> + headerValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理表单请求"><a href="#处理表单请求" class="headerlink" title="处理表单请求"></a>处理表单请求</h3><h4 id="获取文本框"><a href="#获取文本框" class="headerlink" title="获取文本框"></a>获取文本框</h4><h4 id="获取单选框"><a href="#获取单选框" class="headerlink" title="获取单选框"></a>获取单选框</h4><h4 id="获取下拉列表"><a href="#获取下拉列表" class="headerlink" title="获取下拉列表"></a>获取下拉列表</h4><h4 id="获取文本域"><a href="#获取文本域" class="headerlink" title="获取文本域"></a>获取文本域</h4><h4 id="获取隐藏域"><a href="#获取隐藏域" class="headerlink" title="获取隐藏域"></a>获取隐藏域</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">req.getParameter(<span class="string">"text"</span>);</span><br><span class="line">req.getParameter(<span class="string">"radio"</span>);</span><br><span class="line">req.getParameter(<span class="string">"select"</span>);</span><br><span class="line">req.getParameter(<span class="string">"textarea"</span>);</span><br><span class="line">req.getParameter(<span class="string">"hidden"</span>);</span><br></pre></td></tr></table></figure><h4 id="获取复选框"><a href="#获取复选框" class="headerlink" title="获取复选框"></a>获取复选框</h4><ul><li>返回String[]类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.getParameterValues(<span class="string">"checkbox"</span>);</span><br></pre></td></tr></table></figure><h2 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h2><ul><li><p>当一个Servlet资源第一次被访问的时候，由服务器创建Servlet资源对象，通过调用Servlet的init()方法，完成对象的初始操作，该方法只会调用一次</p></li><li><p>对象完成初始化以后，服务器会调用Servlet()方法，完成相关的业务处理（执行各种操作，例如doGet或者doPost），该方法可以反复执行，每一次访问该Servlet资源都会执行该方法</p></li><li><p>当服务器停止的时候，服务器会调用Servlet资源的destroy()方法，用来销毁Servlet对象</p></li></ul><h3 id="自动初始化"><a href="#自动初始化" class="headerlink" title="自动初始化"></a>自动初始化</h3><ul><li><p>服务器启动的时候立即创建Servlet资源对象，同时访问init()方法完成对象的初始化，其中配置是一个整数数字，最小值是1，值越小，访问的优先级越高</p></li><li><p>修改<code>web.xml</code>的<code>&lt;servlet&gt;&lt;/servlet&gt;</code>块</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="请求转发（服务器端跳转）"><a href="#请求转发（服务器端跳转）" class="headerlink" title="请求转发（服务器端跳转）"></a>请求转发（服务器端跳转）</h2><ul><li>余下代码后执行，先跳转</li></ul><blockquote><p><code>&lt;name&gt;</code>：另一个资源的路径名</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.getRequestDispatcher(<span class="string">"&lt;name&gt;"</span>).forward(req, resp);</span><br></pre></td></tr></table></figure><h2 id="目标重定向（客户端跳转）"><a href="#目标重定向（客户端跳转）" class="headerlink" title="目标重定向（客户端跳转）"></a>目标重定向（客户端跳转）</h2><ul><li>余下代码先执行，后跳转</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resp.sendRedirect(<span class="string">"&lt;name&gt;"</span>);</span><br></pre></td></tr></table></figure><h2 id="未完待更"><a href="#未完待更" class="headerlink" title="未完待更"></a>未完待更</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>达内教育</p>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/05/10/Servlet%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【笔记】系统自启脚本管理器</title>
      <link>https://feiju12138.github.io/2020/05/08/%E7%B3%BB%E7%BB%9F%E8%87%AA%E5%90%AF%E8%84%9A%E6%9C%AC%E7%AE%A1%E7%90%86%E5%99%A8/</link>
      <guid>https://feiju12138.github.io/2020/05/08/%E7%B3%BB%E7%BB%9F%E8%87%AA%E5%90%AF%E8%84%9A%E6%9C%AC%E7%AE%A1%E7%90%86%E5%99%A8/</guid>
      <pubDate>Fri, 08 May 2020 01:59:51 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;MacOS系统启动时，所有自启动的服务都由自启动脚本管理器负责管理，也就是可以通过&lt;code&gt;安装&lt;/code&gt;或者&lt;code&gt;卸载&lt;/code&gt;自启动脚本来&lt;code&gt;自启&lt;/code&gt;或者&lt;code&gt;防止&lt;/code&gt;服务的开机自启&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>MacOS系统启动时，所有自启动的服务都由自启动脚本管理器负责管理，也就是可以通过<code>安装</code>或者<code>卸载</code>自启动脚本来<code>自启</code>或者<code>防止</code>服务的开机自启</p><a id="more"></a><h2 id="安装自启脚本"><a href="#安装自启脚本" class="headerlink" title="安装自启脚本"></a>安装自启脚本</h2><blockquote><p><code>&lt;plist&gt;</code>：macOS的.plist脚本文件</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">launchctl load &lt;plist&gt;</span><br></pre></td></tr></table></figure><h2 id="卸载自启脚本"><a href="#卸载自启脚本" class="headerlink" title="卸载自启脚本"></a>卸载自启脚本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">launchctl unload &lt;plist&gt;</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><h3 id="MacOS系统自启脚本位置"><a href="#MacOS系统自启脚本位置" class="headerlink" title="MacOS系统自启脚本位置"></a>MacOS系统自启脚本位置</h3><ul><li><code>/Library/LaunchAgents</code></li></ul><h3 id="MacOS用户自启脚本位置"><a href="#MacOS用户自启脚本位置" class="headerlink" title="MacOS用户自启脚本位置"></a>MacOS用户自启脚本位置</h3><ul><li><code>~/Library/LaunchAgents</code></li></ul><h3 id="brew自启脚本位置"><a href="#brew自启脚本位置" class="headerlink" title="brew自启脚本位置"></a>brew自启脚本位置</h3><blockquote><p><code>&lt;app&gt;</code>：brew安装的程序</p></blockquote><ul><li><code>/usr/local/Cellar/&lt;app&gt;/*.plist</code></li></ul><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.jianshu.com/p/56163b82235b" target="_blank" rel="noopener">知乎——leejnull</a></p>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/05/08/%E7%B3%BB%E7%BB%9F%E8%87%AA%E5%90%AF%E8%84%9A%E6%9C%AC%E7%AE%A1%E7%90%86%E5%99%A8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【笔记】用IDEA创建一个Javaweb项目</title>
      <link>https://feiju12138.github.io/2020/05/07/%E7%94%A8IDEA%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAJavaweb%E9%A1%B9%E7%9B%AE/</link>
      <guid>https://feiju12138.github.io/2020/05/07/%E7%94%A8IDEA%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAJavaweb%E9%A1%B9%E7%9B%AE/</guid>
      <pubDate>Thu, 07 May 2020 08:45:56 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;用IDEA创建一个Javaweb项目&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>用IDEA创建一个Javaweb项目</p><a id="more"></a><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><ul><li><code>Java Enterprise</code>-&gt;选择SDK版本-&gt;勾选<code>Web Application</code></li></ul><p><img src="/images/20200507164556/01.png" alt="01.png"></p><ul><li>项目命名-&gt;<code>finish</code></li></ul><h2 id="创建classes目录和lib目录"><a href="#创建classes目录和lib目录" class="headerlink" title="创建classes目录和lib目录"></a>创建classes目录和lib目录</h2><ul><li>在<code>web-&gt;WEB-INF</code>目录下分别创建<code>classes</code>目录和<code>lib</code>目录</li></ul><p><img src="/images/20200507164556/02.png" alt="02.png"></p><h2 id="部署classes目录"><a href="#部署classes目录" class="headerlink" title="部署classes目录"></a>部署classes目录</h2><ul><li><p><code>File</code>-&gt;<code>Project Structure...</code>-&gt;<code>Modules</code>-&gt;<code>Paths</code>-&gt;勾选<code>Use module compule output path</code></p></li><li><p>在<code>Output path</code>和<code>Test output path</code>都选择刚刚创建的<code>classes</code>目录</p></li></ul><p><img src="/images/20200507164556/03.png" alt="03.png"></p><h2 id="部署lib目录"><a href="#部署lib目录" class="headerlink" title="部署lib目录"></a>部署lib目录</h2><ul><li><p><code>File</code>-&gt;<code>Project Structure...</code>-&gt;<code>Modules</code>-&gt;<code>Dependencies</code>-&gt;点击加号-&gt;<code>JARs or directories...</code></p></li><li><p>选择刚刚创建的<code>lib</code>目录</p></li></ul><p><img src="/images/20200507164556/04.png" alt="04.png"></p><ul><li>选择<code>Jar Directory</code></li></ul><p><img src="/images/20200507164556/05.png" alt="05.png"></p><h2 id="配置打包方式"><a href="#配置打包方式" class="headerlink" title="配置打包方式"></a>配置打包方式</h2><ul><li><code>File</code>-&gt;<code>Project Structure...</code>-&gt;<code>Artifacts</code>-&gt;选择项目-&gt;勾选<code>Include in project build</code>-&gt;勾选<code>Show content of elements</code></li></ul><p><img src="/images/20200507164556/06.png" alt="06.png"></p><h2 id="配置运行方式"><a href="#配置运行方式" class="headerlink" title="配置运行方式"></a>配置运行方式</h2><ul><li><p><code>Run</code>-&gt;<code>Edit Configurations...</code>-&gt;点击加号-&gt;选择<code>Tomcat Server</code></p></li><li><p>点击<code>Configure...</code>选择配置好的相应版本Tomcat</p></li></ul><p>如果没有任何配置好的Tomcat</p><p>点击加号-&gt;选择<code>Tomcat Home</code>-&gt;<code>OK</code>-&gt;<code>OK</code></p><p><img src="/images/20200507164556/07.png" alt="07.png"></p><ul><li><p>去掉勾选<code>After launch</code></p></li><li><p>选择浏览器</p></li><li><p>在<code>Tomcat Server Settings</code>配置Tomcat参数</p></li></ul><p><img src="/images/20200507164556/08.png" alt="08.png"></p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/weixin_38500325/article/details/82356175" target="_blank" rel="noopener">CSDN——遇见1995</a></p>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/05/07/%E7%94%A8IDEA%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAJavaweb%E9%A1%B9%E7%9B%AE/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
