<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>绯鞠的博客</title>
    <link>https://feiju12138.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>捕捉一只爱折腾的绯鞠</description>
    <pubDate>Mon, 27 Jul 2020 08:56:53 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>【笔记】Socket 网络编程</title>
      <link>https://feiju12138.github.io/2020/07/27/Socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</link>
      <guid>https://feiju12138.github.io/2020/07/27/Socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</guid>
      <pubDate>Mon, 27 Jul 2020 08:53:50 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Java Socket&amp;amp;ServerSocket 网络套接字编程&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java Socket&amp;ServerSocket 网络套接字编程</p><a id="more"></a><h2 id="ServerSocket"><a href="#ServerSocket" class="headerlink" title="ServerSocket"></a>ServerSocket</h2><ul><li>服务器代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建ServerSocket对象，参数为开放的端口号</span></span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">8000</span>);</span><br><span class="line">        System.out.println(<span class="string">"服务器已启动"</span>);</span><br><span class="line">        <span class="comment">// 获取客户端的连接（Socket对象）</span></span><br><span class="line">        Socket socket = server.accept();</span><br><span class="line">        <span class="comment">// 获取IO流</span></span><br><span class="line">        InputStream in = socket.getInputStream();</span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// IO读写操作</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        out.flush(); <span class="comment">// 把资源刷出去但不关闭资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><ul><li>客户端代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建Socket对象，参数为服务器IP地址和端口号</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">8000</span>);</span><br><span class="line">        System.out.println(<span class="string">"与服务器连接成功"</span>);</span><br><span class="line">        <span class="comment">// 获取IO流</span></span><br><span class="line">        InputStream in = socket.getInputStream();</span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// IO读写操作</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        out.flush(); <span class="comment">// 把资源刷出去但不关闭资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/07/27/Socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【笔记】内部类</title>
      <link>https://feiju12138.github.io/2020/07/27/%E5%86%85%E9%83%A8%E7%B1%BB/</link>
      <guid>https://feiju12138.github.io/2020/07/27/%E5%86%85%E9%83%A8%E7%B1%BB/</guid>
      <pubDate>Mon, 27 Jul 2020 02:34:53 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Java 内部类 学习笔记&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java 内部类 学习笔记</p><a id="more"></a><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>内部类可以直接访问外部类中的成员，包括私有成员</li><li>外部类要访问内部类的成员，必须要建立内部类的对象</li><li>在成员位置的内部类是成员内部类</li><li>在局部位置的内部类是局部内部类</li></ul><h2 id="创建内部类对象"><a href="#创建内部类对象" class="headerlink" title="创建内部类对象"></a>创建内部类对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer.Inner inner = <span class="keyword">new</span> Outer().<span class="keyword">new</span> Inner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><ul><li>匿名内部类是特殊的成员内部类</li><li>匿名对象一次只能执行一个任务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Inner() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h4><ul><li>匿名内部类的加强，jdk1.8新特性</li><li>接口中必须只有一个抽象方法才可以使用lambda表达式</li></ul><blockquote><p><code>...</code>：小括号内传递构造方法的参数，无参则不写<br><code>...</code>：大括号内写重写的抽象方法的内容</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Interface Inter &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Inter inter = (...)-&gt;&#123; ... &#125;;</span><br><span class="line">        inter.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/07/27/%E5%86%85%E9%83%A8%E7%B1%BB/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【笔记】Java设计模式</title>
      <link>https://feiju12138.github.io/2020/07/24/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <guid>https://feiju12138.github.io/2020/07/24/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <pubDate>Fri, 24 Jul 2020 08:19:24 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Java 设计模式&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java 设计模式</p><a id="more"></a><h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><ul><li>每个类只创建一个对象，节省内存</li></ul><ol><li>构造方法私有</li><li>外界设法获取内部创建好的对象</li><li>对外提供全局访问点</li></ol><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MySingleton mySingleton = MySingleton.getMySingleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MySingleton mySingleton = <span class="keyword">new</span> MySingleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MySingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MySingleton <span class="title">getMySingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mySingleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MySingleton mySingleton = MySingleton.getMySingleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MySingleton mySingleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MySingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MySingleton <span class="title">getMySingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mySingleton==<span class="keyword">null</span>) &#123;</span><br><span class="line">            mySingleton = <span class="keyword">new</span> MySingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mySingleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解决线程安全"><a href="#解决线程安全" class="headerlink" title="解决线程安全"></a>解决线程安全</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MySingleton mySingleton = MySingleton.getMySingleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MySingleton mySingleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MySingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MySingleton <span class="title">getMySingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (MySingleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (mySingleton==<span class="keyword">null</span>) &#123;</span><br><span class="line">                mySingleton = <span class="keyword">new</span> MySingleton();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> mySingleton;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/07/24/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【笔记】反射学习笔记</title>
      <link>https://feiju12138.github.io/2020/07/23/%E5%8F%8D%E5%B0%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <guid>https://feiju12138.github.io/2020/07/23/%E5%8F%8D%E5%B0%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Thu, 23 Jul 2020 10:55:56 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;反射学习笔记&lt;br&gt;拿到class文件，分析里面的所有数据，操作数据&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>反射学习笔记<br>拿到class文件，分析里面的所有数据，操作数据</p><a id="more"></a><h2 id="获取类对象"><a href="#获取类对象" class="headerlink" title="获取类对象"></a>获取类对象</h2><h3 id="用类名获取"><a href="#用类名获取" class="headerlink" title="用类名获取"></a>用类名获取</h3><blockquote><p><code>&lt;Class&gt;</code>：类名</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Class&gt;<span class="class">.<span class="keyword">class</span></span></span><br></pre></td></tr></table></figure><h3 id="用对象名获取"><a href="#用对象名获取" class="headerlink" title="用对象名获取"></a>用对象名获取</h3><blockquote><p><code>&lt;class&gt;</code>：引用类型变量名</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span>&gt;.<span class="title">getClass</span>()</span></span><br></pre></td></tr></table></figure><h3 id="用类的全名获取"><a href="#用类的全名获取" class="headerlink" title="用类的全名获取"></a>用类的全名获取</h3><blockquote><p><code>&lt;package.class&gt;</code>：类全名</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; c = Class.forName(<span class="string">"&lt;package.class&gt;"</span>);</span><br></pre></td></tr></table></figure><h2 id="获得包名类名"><a href="#获得包名类名" class="headerlink" title="获得包名类名"></a>获得包名类名</h2><h3 id="获得包名"><a href="#获得包名" class="headerlink" title="获得包名"></a>获得包名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.getPackage().getName()</span><br></pre></td></tr></table></figure><h3 id="获得完整类名"><a href="#获得完整类名" class="headerlink" title="获得完整类名"></a>获得完整类名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.getName()</span><br></pre></td></tr></table></figure><h3 id="获得类名"><a href="#获得类名" class="headerlink" title="获得类名"></a>获得类名</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.getSimpleName()</span><br></pre></td></tr></table></figure><h2 id="获得成员变量的定义信息"><a href="#获得成员变量的定义信息" class="headerlink" title="获得成员变量的定义信息"></a>获得成员变量的定义信息</h2><h3 id="得到可见的所有成员变量"><a href="#得到可见的所有成员变量" class="headerlink" title="得到可见的所有成员变量"></a>得到可见的所有成员变量</h3><ul><li>包括继承的变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getFields()</span><br></pre></td></tr></table></figure><h3 id="获得包括不可见的所有变量"><a href="#获得包括不可见的所有变量" class="headerlink" title="获得包括不可见的所有变量"></a>获得包括不可见的所有变量</h3><ul><li>包括私有变量，不包括继承的变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getDeclaredFields()</span><br></pre></td></tr></table></figure><h3 id="获得可见的一个变量"><a href="#获得可见的一个变量" class="headerlink" title="获得可见的一个变量"></a>获得可见的一个变量</h3><blockquote><p><code>&lt;name&gt;</code>：变量名</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getField(&lt;name&gt;)</span><br></pre></td></tr></table></figure><h3 id="获得包括不可见的一个变量"><a href="#获得包括不可见的一个变量" class="headerlink" title="获得包括不可见的一个变量"></a>获得包括不可见的一个变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getDeclaredField(&lt;name&gt;)</span><br></pre></td></tr></table></figure><h2 id="获得构造方法的定义信息"><a href="#获得构造方法的定义信息" class="headerlink" title="获得构造方法的定义信息"></a>获得构造方法的定义信息</h2><h3 id="获得可见的构造方法"><a href="#获得可见的构造方法" class="headerlink" title="获得可见的构造方法"></a>获得可见的构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getConstructors()</span><br></pre></td></tr></table></figure><h3 id="获得包括不可见的构造方法"><a href="#获得包括不可见的构造方法" class="headerlink" title="获得包括不可见的构造方法"></a>获得包括不可见的构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getDeclaredConstructors()</span><br></pre></td></tr></table></figure><h3 id="获得可见的一个构造方法"><a href="#获得可见的一个构造方法" class="headerlink" title="获得可见的一个构造方法"></a>获得可见的一个构造方法</h3><blockquote><p><code>&lt;int&gt;.class</code>：基本类型的类对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getConstructor(&lt;<span class="keyword">int</span>&gt;<span class="class">.<span class="keyword">class</span>)</span></span><br></pre></td></tr></table></figure><h3 id="获得包括不可见的一个构造方法"><a href="#获得包括不可见的一个构造方法" class="headerlink" title="获得包括不可见的一个构造方法"></a>获得包括不可见的一个构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getDeclaredConstructor(&lt;<span class="keyword">int</span>&gt;<span class="class">.<span class="keyword">class</span>)</span></span><br></pre></td></tr></table></figure><h2 id="获得方法的定义信息"><a href="#获得方法的定义信息" class="headerlink" title="获得方法的定义信息"></a>获得方法的定义信息</h2><h3 id="获得可见的方法"><a href="#获得可见的方法" class="headerlink" title="获得可见的方法"></a>获得可见的方法</h3><ul><li>包括继承的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getMethods()</span><br></pre></td></tr></table></figure><h3 id="获得本类定义的方法"><a href="#获得本类定义的方法" class="headerlink" title="获得本类定义的方法"></a>获得本类定义的方法</h3><ul><li>包括私有方法，不包括继承的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getDeclearedMethods()</span><br></pre></td></tr></table></figure><h3 id="获得可见的一个方法"><a href="#获得可见的一个方法" class="headerlink" title="获得可见的一个方法"></a>获得可见的一个方法</h3><blockquote><p><code>&lt;method&gt;</code>：方法名</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getMethod(&lt;method&gt;, &lt;<span class="keyword">int</span>&gt;<span class="class">.<span class="keyword">class</span>)</span></span><br></pre></td></tr></table></figure><h3 id="获得本类定义的一个方法"><a href="#获得本类定义的一个方法" class="headerlink" title="获得本类定义的一个方法"></a>获得本类定义的一个方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getDeclearedMethod(&lt;method&gt;, &lt;<span class="keyword">int</span>&gt;<span class="class">.<span class="keyword">class</span>)</span></span><br></pre></td></tr></table></figure><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><h3 id="利用无参构造创建"><a href="#利用无参构造创建" class="headerlink" title="利用无参构造创建"></a>利用无参构造创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newInstance()</span><br></pre></td></tr></table></figure><h3 id="利用有参构造创建"><a href="#利用有参构造创建" class="headerlink" title="利用有参构造创建"></a>利用有参构造创建</h3><blockquote><p><code>&lt;str&gt;</code>：以字符串为例利用有参构造创建对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c.getConstaructor(String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">c.newInstance(<span class="string">"&lt;str&gt;"</span>);</span><br></pre></td></tr></table></figure><h2 id="执行方法"><a href="#执行方法" class="headerlink" title="执行方法"></a>执行方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoke()</span><br></pre></td></tr></table></figure><h2 id="暴力反射"><a href="#暴力反射" class="headerlink" title="暴力反射"></a>暴力反射</h2><h3 id="暴力反射关键字"><a href="#暴力反射关键字" class="headerlink" title="暴力反射关键字"></a>暴力反射关键字</h3><ul><li><code>Decleared</code></li></ul><h3 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h3><ul><li>访问私有属性时，需要先设置访问权限，才可以访问</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.setAccessible(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/07/23/%E5%8F%8D%E5%B0%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【笔记】将iOS备份移到外置磁盘</title>
      <link>https://feiju12138.github.io/2020/07/21/%E5%B0%86iOS%E5%A4%87%E4%BB%BD%E7%A7%BB%E5%88%B0%E5%A4%96%E7%BD%AE%E7%A3%81%E7%9B%98/</link>
      <guid>https://feiju12138.github.io/2020/07/21/%E5%B0%86iOS%E5%A4%87%E4%BB%BD%E7%A7%BB%E5%88%B0%E5%A4%96%E7%BD%AE%E7%A3%81%E7%9B%98/</guid>
      <pubDate>Tue, 21 Jul 2020 10:37:05 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;将iOS备份移到外置磁盘，节省Mac硬盘的占用&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>将iOS备份移到外置磁盘，节省Mac硬盘的占用</p><a id="more"></a><h2 id="保留旧备份（可选）"><a href="#保留旧备份（可选）" class="headerlink" title="保留旧备份（可选）"></a>保留旧备份（可选）</h2><ul><li>进入到iOS备份的目录</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open ~/Library/Application Support/MobileSync/</span><br></pre></td></tr></table></figure><ul><li>将<code>Backup</code>更名为<code>Backup.default</code></li></ul><h2 id="开始转移"><a href="#开始转移" class="headerlink" title="开始转移"></a>开始转移</h2><ul><li><p>复制<code>~/Library/Application Support/MobileSync/</code>下的<code>Backup</code>目录到外置磁盘根目录</p></li><li><p>建立软连接</p></li></ul><blockquote><p><code>&lt;name&gt;</code>：外置磁盘的目录名</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /Volumes/&lt;name&gt;/Backup ~/Library/Application\ Support/MobileSync/Backup</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://sspai.com/post/33524" target="_blank" rel="noopener">少数派</a></p>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/07/21/%E5%B0%86iOS%E5%A4%87%E4%BB%BD%E7%A7%BB%E5%88%B0%E5%A4%96%E7%BD%AE%E7%A3%81%E7%9B%98/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
