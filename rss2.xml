<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>绯鞠的博客</title>
    <link>https://feiju12138.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>捕捉一只爱折腾的绯鞠</description>
    <pubDate>Mon, 26 Oct 2020 13:23:07 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>【笔记】Shiro快速入门</title>
      <link>https://feiju12138.github.io/2020/10/26/Shiro%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</link>
      <guid>https://feiju12138.github.io/2020/10/26/Shiro%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</guid>
      <pubDate>Mon, 26 Oct 2020 11:54:09 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Shiro框架快速入门&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Shiro框架快速入门</p><a id="more"></a><h2 id="创建配置类"><a href="#创建配置类" class="headerlink" title="创建配置类"></a>创建配置类</h2><ul><li>也可以在配置文件进行配置</li></ul><h3 id="新建一个配置类"><a href="#新建一个配置类" class="headerlink" title="新建一个配置类"></a>新建一个配置类</h3><ul><li>新建一个类作为Shiro的配置类，并由<code>@Configuration</code>注解标注</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringShiroConfig</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置核心对象"><a href="#配置核心对象" class="headerlink" title="配置核心对象"></a>配置核心对象</h3><ul><li>创建配置Shiro核心对象的方法，并交给Spring管理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">    DefaultWebSecurityManager securityManager=<span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">    <span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置访问规则"><a href="#配置访问规则" class="headerlink" title="配置访问规则"></a>配置访问规则</h3><ul><li>创建配置Shiro访问规则的方法，配置匿名访问的资源和认证的访问的资源，并交给Spring管理</li></ul><blockquote><p>Shiro中默认过滤器</p><blockquote><p><code>anon</code>：允许匿名访问<br><code>authc</code>：需要认证后访问<br><code>logout</code>：退出过滤器，一旦执行了退出操作，底层会将系统服务端存储的用户信息进行清除并且直接跳转到登陆页面</p></blockquote></blockquote><blockquote><p><code>**</code>：表示当前目录所有文件及其所有子目录</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilterFactory</span><span class="params">( SecurityManager securityManager)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    ShiroFilterFactoryBean factoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">    <span class="comment">// securityManager对象负责去检测这个请求是否已经认证</span></span><br><span class="line">    factoryBean.setSecurityManager(securityManager);</span><br><span class="line">    <span class="comment">// 配置登陆页面的访问路径</span></span><br><span class="line">    factoryBean.setLoginUrl(<span class="string">"/doLoginUI"</span>);</span><br><span class="line"></span><br><span class="line">    Map&lt;String,String&gt; filterMap=<span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// 配置允许匿名访问的资源（通常为所有的静态资源）</span></span><br><span class="line">    filterMap.put(<span class="string">"/build/**"</span>,<span class="string">"anon"</span>);</span><br><span class="line">    <span class="comment">// 除了匿名访问的资源,其它都要认证后访问</span></span><br><span class="line">    filterMap.put(<span class="string">"/**"</span>,<span class="string">"authc"</span>);</span><br><span class="line">    <span class="comment">// 配置退出过滤器</span></span><br><span class="line">     </span><br><span class="line">    </span><br><span class="line">    factoryBean.setFilterChainDefinitionMap(filterMap);<span class="comment">//过滤链的定义</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> factoryBean;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建Realm类"><a href="#创建Realm类" class="headerlink" title="创建Realm类"></a>创建Realm类</h2><ul><li>创建一个Realm类，继承AuthorizingRealm类并重写抽象方法，为这个类标注<code>@Component</code>注解定义为组建交给Spring管理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroUserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取并封装授权信息（做授权业务时写此方法）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取并封装认证信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取登录时输入的用户名</span></span><br><span class="line">        UsernamePasswordToken uToken = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        String username = uToken.getUsername();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 基于用户名查询数据库中的用户信息</span></span><br><span class="line">        SysUser user = sysUserDao.findUserByUserName(username);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 校验用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException();</span><br><span class="line">        <span class="comment">// 校验用户是否已被禁用</span></span><br><span class="line">        <span class="keyword">if</span> (user.getValid() == <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> LockedAccountException();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 封装用户信息由底层进行密码校验</span></span><br><span class="line">        ByteSource credentialsSalt = ByteSource.Util.bytes(user.getSalt());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user,<span class="comment">//principal 身份</span></span><br><span class="line">                user.getPassword(),<span class="comment">//hashedCredentials 已加密的密码</span></span><br><span class="line">                credentialsSalt,<span class="comment">//credentialsSalt 凭证盐</span></span><br><span class="line">                getName());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对用户输入的密码进行加密"><a href="#对用户输入的密码进行加密" class="headerlink" title="对用户输入的密码进行加密"></a>对用户输入的密码进行加密</h3><ul><li>重写getCredentialsMatcher方法或setCredentialsMatcher方法其中一个，用于返回凭证加密对象，基于此对象对用户输入的密码进行加密操作</li></ul><h4 id="重写getCredentialsMatcher方法"><a href="#重写getCredentialsMatcher方法" class="headerlink" title="重写getCredentialsMatcher方法"></a>重写getCredentialsMatcher方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CredentialsMatcher <span class="title">getCredentialsMatcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HashedCredentialsMatcher credentialsMatcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">    <span class="comment">// 定义加密类型</span></span><br><span class="line">    credentialsMatcher.setHashAlgorithmName(<span class="string">"MD5"</span>);</span><br><span class="line">    <span class="comment">// 定义加密次数</span></span><br><span class="line">    credentialsMatcher.setHashIterations(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> credentialsMatcher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重写getCredentialsMatcher方法-1"><a href="#重写getCredentialsMatcher方法-1" class="headerlink" title="重写getCredentialsMatcher方法"></a>重写getCredentialsMatcher方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCredentialsMatcher</span><span class="params">(CredentialsMatcher credentialsMatcher)</span> </span>&#123;</span><br><span class="line">    HashedCredentialsMatcher cMatcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">    <span class="comment">// 定义加密类型</span></span><br><span class="line">    cMatcher.setHashAlgorithmName(<span class="string">"MD5"</span>);</span><br><span class="line">    <span class="comment">// 定义加密次数</span></span><br><span class="line">    cMatcher.setHashIterations(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">super</span>.setCredentialsMatcher(cMatcher);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/10/26/Shiro%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【笔记】Spring框架中的线程池</title>
      <link>https://feiju12138.github.io/2020/10/26/Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <guid>https://feiju12138.github.io/2020/10/26/Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <pubDate>Mon, 26 Oct 2020 10:42:51 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;配置Spring框架中的线程池&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>配置Spring框架中的线程池</p><a id="more"></a><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote><p><code>pool</code></p><blockquote><p><code>core-size</code>：配置线程池中核心线程数，当池中线程没有达到这个值时，每次从池中请求线程都会创建一个新的线程<br><code>max-size</code>：配置线程池中最大线程数，当池中核心线程都在忙，任务队列也满了，此时又有新的任务要交给池中线程去执行，当池&gt;中线程没有达到最大值时，此时创建新的线程去执行任务<br><code>queue-capacity</code>：配置线程池中任务队列，当池中核心线程都在忙，又有新的任务要交给池中线程去执行，此时可以将任务存储到任务队列<br><code>keep-alive</code>：配置超时，当池中线程数大于核心线程数，又没有新的任务时，此时空闲下来的线程，超过keep-alive这个参数指定的值，线程会被释放</p></blockquote></blockquote><blockquote><p><code>thread-name-prefix</code>：定义池中线程名的前缀，默认为<code>task-</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">task:</span></span><br><span class="line">    <span class="attr">execution:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">core-size:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">max-size:</span> <span class="number">128</span></span><br><span class="line">        <span class="attr">queue-capacity:</span> <span class="number">256</span></span><br><span class="line">        <span class="attr">keep-alive:</span> <span class="string">120s</span></span><br><span class="line">      <span class="attr">thread-name-prefix:</span> <span class="string">task-</span></span><br></pre></td></tr></table></figure><h2 id="创建线程池对象"><a href="#创建线程池对象" class="headerlink" title="创建线程池对象"></a>创建线程池对象</h2><h3 id="创建线程工厂"><a href="#创建线程工厂" class="headerlink" title="创建线程工厂"></a>创建线程工厂</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ThreadFactory threadFactory = <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line">    <span class="comment">// 创建一个线程安全的自增长整型数</span></span><br><span class="line">    <span class="keyword">private</span> AtomicLong atomicLong = <span class="keyword">new</span> AtomicLong(<span class="number">1</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// getAndIncrement()为先获取后自增</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">"thread-"</span>+atomicLong.getAndIncrement());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="创建线程池对象-1"><a href="#创建线程池对象-1" class="headerlink" title="创建线程池对象"></a>创建线程池对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">        <span class="number">8</span>, <span class="comment">// 核心线程数</span></span><br><span class="line">        <span class="number">128</span>, <span class="comment">// 最大线程数</span></span><br><span class="line">        <span class="number">120</span>, <span class="comment">// 线程空闲时间</span></span><br><span class="line">        TimeUnit.SECONDS, <span class="comment">// 时间单位</span></span><br><span class="line">        <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">1</span>), <span class="comment">// 任务队列</span></span><br><span class="line">        threadFactory, <span class="comment">// 线程工厂</span></span><br><span class="line">        <span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="调用一个线程来执行任务"><a href="#调用一个线程来执行任务" class="headerlink" title="调用一个线程来执行任务"></a>调用一个线程来执行任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">threadPoolExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/10/26/Spring%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【笔记】搭建用于激活Windows的KMS服务器</title>
      <link>https://feiju12138.github.io/2020/10/24/%E6%90%AD%E5%BB%BA%E7%94%A8%E4%BA%8E%E6%BF%80%E6%B4%BBWindows%E7%9A%84KMS%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <guid>https://feiju12138.github.io/2020/10/24/%E6%90%AD%E5%BB%BA%E7%94%A8%E4%BA%8E%E6%BF%80%E6%B4%BBWindows%E7%9A%84KMS%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <pubDate>Sat, 24 Oct 2020 11:16:45 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;搭建用于激活Windows的KMS服务器，本教程以MacOS服务器激活Windows10为例&lt;br&gt;虚拟机中运行的Windows也可以作为Windows服务器用于激活，用于激活的Windows服务器可以未激活状态&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>搭建用于激活Windows的KMS服务器，本教程以MacOS服务器激活Windows10为例<br>虚拟机中运行的Windows也可以作为Windows服务器用于激活，用于激活的Windows服务器可以未激活状态</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li><code>vlmcsd</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/kkkgo/vlmcsd.git</span><br></pre></td></tr></table></figure><h2 id="搭建服务器"><a href="#搭建服务器" class="headerlink" title="搭建服务器"></a>搭建服务器</h2><h3 id="MacOS端启动服务"><a href="#MacOS端启动服务" class="headerlink" title="MacOS端启动服务"></a>MacOS端启动服务</h3><ul><li>打开终端</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /vlmcsd/binaries/MacOSX/intel</span><br><span class="line">chmod +x vlmcsd-MacOSX-x64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看能激活的产品</span></span><br><span class="line">./vlmcsd-MacOSX-x64 -x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">./vlmcsd-MacOSX-x64</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看服务启动状态</span></span><br><span class="line">lsof -i :1688</span><br></pre></td></tr></table></figure><h3 id="Windows端进行激活"><a href="#Windows端进行激活" class="headerlink" title="Windows端进行激活"></a>Windows端进行激活</h3><ul><li><p>管理员身份打开CMD</p></li><li><p>安装密钥</p></li></ul><blockquote><p><code>&lt;key&gt;</code>：网上找到用于KMS激活的对应系统版本的密钥</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr /ipk &lt;key&gt;</span><br></pre></td></tr></table></figure><ul><li>设置激活服务器</li></ul><blockquote><p><code>&lt;ip&gt;</code>：刚刚搭建的激活服务器ip地址</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr /skms &lt;ip&gt;</span><br></pre></td></tr></table></figure><ul><li>激活</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr /ato</span><br></pre></td></tr></table></figure><ul><li>等待激活成功</li></ul><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.bilibili.com/video/BV1fV411B71K" target="_blank" rel="noopener">哔哩哔哩——爱比较ovo</a></p>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/10/24/%E6%90%AD%E5%BB%BA%E7%94%A8%E4%BA%8E%E6%BF%80%E6%B4%BBWindows%E7%9A%84KMS%E6%9C%8D%E5%8A%A1%E5%99%A8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【笔记】SpringBoot 事务处理</title>
      <link>https://feiju12138.github.io/2020/10/24/SpringBoot%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/</link>
      <guid>https://feiju12138.github.io/2020/10/24/SpringBoot%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/</guid>
      <pubDate>Sat, 24 Oct 2020 10:23:46 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;SpringBoot使用通过原声AOP实现事务处理&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SpringBoot使用通过原声AOP实现事务处理</p><a id="more"></a><h2 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h2><ul><li>@Transactional注解描述的方法为事务切入点方法，这个方法在执行之前会开启事务，方法执行之后会提交或回滚事务。</li><li>可以描述类也可以描述方法，方法上事务特性优先级要高于类上定义的事务特性</li></ul><blockquote><p><code>readOnly</code>：定义线程安全，默认为false，true表示线程不安全。建议所有查询操作都将readOnly属性值改为true。<br><code>rollbackFor</code>：定义指定异常才会回滚，默认为RuntimeException。<br><code>noRollbackFor</code>：定义指定异常不回滚<br><code>timeout</code>：定义超时时间，默认为-1，表示不超时<br><code>isolation</code>：定义事务的隔离级别<br><code>propagation</code>：定义事务传播特性，默认<code>Propagation.REQUIRED</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(</span><br><span class="line">    readOnly = <span class="keyword">true</span>,</span><br><span class="line">    rollbackFor = RuntimeException<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">noRollbackFor</span> </span>= RuntimeException<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">timeout</span> </span>= -<span class="number">1</span>, isolation = Isolation.DEFAULT,</span><br><span class="line">    propagation = Propagation.REQUIRED</span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/10/24/SpringBoot%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【笔记】SpringBoot Cache</title>
      <link>https://feiju12138.github.io/2020/10/24/SpringBootCache/</link>
      <guid>https://feiju12138.github.io/2020/10/24/SpringBootCache/</guid>
      <pubDate>Sat, 24 Oct 2020 10:18:58 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;SpringBoot使用通过原生AOP实现的Cache&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SpringBoot使用通过原生AOP实现的Cache</p><a id="more"></a><h2 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h2><h3 id="为当前方法添加Cache"><a href="#为当前方法添加Cache" class="headerlink" title="为当前方法添加Cache"></a>为当前方法添加Cache</h3><blockquote><p><code>methodCache</code>：Cache名</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable</span>(<span class="string">"methodCache"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="启动清理缓存"><a href="#启动清理缓存" class="headerlink" title="启动清理缓存"></a>启动清理缓存</h3><blockquote><p><code>value</code>：清理的Cache名<br><code>allEntries</code>：清理全部内容<br><code>beforeInvocation</code>：清理时间在方法执行前</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheEvict</span>(value = <span class="string">"methodCache"</span>, allEntries = <span class="keyword">true</span>, beforeInvocation = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2>]]></content:encoded>
      
      <comments>https://feiju12138.github.io/2020/10/24/SpringBootCache/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
